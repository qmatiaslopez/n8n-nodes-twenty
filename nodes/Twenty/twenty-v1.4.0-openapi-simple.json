{
	"openapi": "3.1.1",
	"info": {
		"title": "Twenty Api",
		"description": "Use this page to explore and call the **REST API**.\n\n## Authentication\n\nSend a Bearer token with each request:\n\n```http\nAuthorization: Bearer <token>\n```\n\nExample cURL:\n\n```bash\ncurl -H 'Authorization: Bearer <token>' <server>/rest/core/companies\n```\n\nTokens can be generated in Settings â†’ Playground and are workspace-scoped.\n\n## Filters\n\nUse the `filter` query parameter to narrow results.\n\n- Format: `field[COMPARATOR]:value`\n- Multiple conditions: `field1[eq]:1,field2[gte]:10` (root conjunction is AND)\n- Composite fields: `field.subField[COMPARATOR]:value`\n- Common comparators: `eq`, `neq`, `in`, `containsAny`, `is`, `gt`, `gte`, `lt`, `lte`, `startsWith`, `like`, `ilike`\n\nExamples:\n\n```text\nfilter=status[eq]:\"open\"\nfilter=createdAt[gte]:\"2024-01-01\"\nfilter=owner.name[ilike]:\"%smith%\"\nfilter=id[in]:[\"id-1\",\"id-2\"]\nfilter=deletedAt[is]:NULL\nfilter=isActive[eq]:true\n```\n\nAdvanced (optional): `and(...)`, `or(...)`, `not(...)` (`not` wraps one condition)\n\n```text\nfilter=or(status[eq]:\"open\",assigneeId[is]:NULL)\n```\n\n## Pagination and ordering\n\nAll list endpoints use cursor-based pagination.\n\n- Use **limit** to cap page size (default: 60, max: 60).\n- Use **starting_after** to fetch the next page (forward).\n- Use **ending_before** to fetch the previous page (backward).\n- Responses include **pageInfo** with `hasNextPage`, `startCursor`, and `endCursor`.\n\nOrdering with `order_by`:\n- Shape: `field1,field2[DIRECTION2]`\n- Directions: AscNullsFirst, AscNullsLast, DescNullsFirst, DescNullsLast\n- Default per-field direction: AscNullsFirst",
		"termsOfService": "https://github.com/twentyhq/twenty?tab=coc-ov-file#readme",
		"contact": { "email": "felix@twenty.com" },
		"license": {
			"name": "AGPL-3.0",
			"url": "https://github.com/twentyhq/twenty?tab=License-1-ov-file#readme"
		},
		"version": "v0.1"
	},
	"servers": [
		{
			"url": "/rest",
			"description": "Twenty REST API"
		}
	],
	"components": {
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT",
				"description": "Enter the token with the `Bearer: ` prefix, e.g. \"Bearer abcde12345\"."
			}
		},
		"schemas": {
			"ApiKey": {
				"type": "object",
				"description": "An API key",
				"properties": {
					"revokedAt": {
						"type": "string",
						"format": "date-time",
						"description": "ApiKey revocation date"
					},
					"expiresAt": {
						"type": "string",
						"format": "date-time",
						"description": "ApiKey expiration date"
					},
					"name": { "type": "string", "description": "ApiKey name" }
				},
				"example": { "expiresAt": "2025-07-03T12:28:59.208Z", "name": "Api Key name" },
				"required": ["expiresAt"]
			},
			"ApiKeyForUpdate": {
				"type": "object",
				"description": "An API key",
				"properties": {
					"revokedAt": {
						"type": "string",
						"format": "date-time",
						"description": "ApiKey revocation date"
					},
					"expiresAt": {
						"type": "string",
						"format": "date-time",
						"description": "ApiKey expiration date"
					},
					"name": { "type": "string", "description": "ApiKey name" }
				},
				"example": { "expiresAt": "2025-07-03T20:56:58.000Z", "name": "Api Key name" }
			},
			"ApiKeyForResponse": {
				"type": "object",
				"description": "An API key",
				"properties": {
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"revokedAt": {
						"type": "string",
						"format": "date-time",
						"description": "ApiKey revocation date"
					},
					"expiresAt": {
						"type": "string",
						"format": "date-time",
						"description": "ApiKey expiration date"
					},
					"name": { "type": "string", "description": "ApiKey name" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" }
				}
			},
			"Attachment": {
				"type": "object",
				"description": "An attachment",
				"properties": {
					"noteId": { "type": "string", "format": "uuid" },
					"taskId": { "type": "string", "format": "uuid" },
					"authorId": { "type": "string", "format": "uuid" },
					"name": { "type": "string", "description": "Attachment name" },
					"type": { "type": "string", "description": "Attachment type" },
					"fullPath": { "type": "string", "description": "Attachment full path" },
					"opportunityId": { "type": "string", "format": "uuid" },
					"companyId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" }
				},
				"example": { "name": "Attachment name" }
			},
			"AttachmentForUpdate": {
				"type": "object",
				"description": "An attachment",
				"properties": {
					"noteId": { "type": "string", "format": "uuid" },
					"taskId": { "type": "string", "format": "uuid" },
					"authorId": { "type": "string", "format": "uuid" },
					"name": { "type": "string", "description": "Attachment name" },
					"type": { "type": "string", "description": "Attachment type" },
					"fullPath": { "type": "string", "description": "Attachment full path" },
					"opportunityId": { "type": "string", "format": "uuid" },
					"companyId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" }
				},
				"example": { "name": "Attachment name" }
			},
			"AttachmentForResponse": {
				"type": "object",
				"description": "An attachment",
				"properties": {
					"noteId": { "type": "string", "format": "uuid" },
					"taskId": { "type": "string", "format": "uuid" },
					"authorId": { "type": "string", "format": "uuid" },
					"name": { "type": "string", "description": "Attachment name" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"type": { "type": "string", "description": "Attachment type" },
					"fullPath": { "type": "string", "description": "Attachment full path" },
					"opportunityId": { "type": "string", "format": "uuid" },
					"companyId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" },
					"note": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/NoteForResponse" }],
						"description": "Attachment note"
					},
					"task": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/TaskForResponse" }],
						"description": "Attachment task"
					},
					"author": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkspaceMemberForResponse" }],
						"description": "Attachment author"
					},
					"opportunity": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/OpportunityForResponse" }],
						"description": "Attachment opportunity"
					},
					"company": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/CompanyForResponse" }],
						"description": "Attachment company"
					},
					"person": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/PersonForResponse" }],
						"description": "Attachment person"
					}
				}
			},
			"Blocklist": {
				"type": "object",
				"description": "Blocklist",
				"properties": {
					"handle": { "type": "string", "description": "Handle" },
					"workspaceMemberId": { "type": "string", "format": "uuid" }
				},
				"example": {}
			},
			"BlocklistForUpdate": {
				"type": "object",
				"description": "Blocklist",
				"properties": {
					"handle": { "type": "string", "description": "Handle" },
					"workspaceMemberId": { "type": "string", "format": "uuid" }
				},
				"example": {}
			},
			"BlocklistForResponse": {
				"type": "object",
				"description": "Blocklist",
				"properties": {
					"handle": { "type": "string", "description": "Handle" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"workspaceMemberId": { "type": "string", "format": "uuid" },
					"workspaceMember": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkspaceMemberForResponse" }],
						"description": "WorkspaceMember"
					}
				}
			},
			"CalendarChannelEventAssociation": {
				"type": "object",
				"description": "Calendar Channel Event Associations",
				"properties": {
					"recurringEventExternalId": { "type": "string", "description": "Recurring Event ID" },
					"calendarEventId": { "type": "string", "format": "uuid" },
					"calendarChannelId": { "type": "string", "format": "uuid" },
					"eventExternalId": { "type": "string", "description": "Event external ID" }
				},
				"example": {}
			},
			"CalendarChannelEventAssociationForUpdate": {
				"type": "object",
				"description": "Calendar Channel Event Associations",
				"properties": {
					"recurringEventExternalId": { "type": "string", "description": "Recurring Event ID" },
					"calendarEventId": { "type": "string", "format": "uuid" },
					"calendarChannelId": { "type": "string", "format": "uuid" },
					"eventExternalId": { "type": "string", "description": "Event external ID" }
				},
				"example": {}
			},
			"CalendarChannelEventAssociationForResponse": {
				"type": "object",
				"description": "Calendar Channel Event Associations",
				"properties": {
					"recurringEventExternalId": { "type": "string", "description": "Recurring Event ID" },
					"calendarEventId": { "type": "string", "format": "uuid" },
					"calendarChannelId": { "type": "string", "format": "uuid" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"eventExternalId": { "type": "string", "description": "Event external ID" },
					"calendarEvent": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/CalendarEventForResponse" }],
						"description": "Event ID"
					},
					"calendarChannel": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/CalendarChannelForResponse" }],
						"description": "Channel ID"
					}
				}
			},
			"CalendarChannel": {
				"type": "object",
				"description": "Calendar Channels",
				"properties": {
					"handle": { "type": "string", "description": "Handle" },
					"syncStatus": {
						"type": "string",
						"enum": [
							"ONGOING",
							"NOT_SYNCED",
							"ACTIVE",
							"FAILED_INSUFFICIENT_PERMISSIONS",
							"FAILED_UNKNOWN"
						],
						"description": "Sync status"
					},
					"syncStage": {
						"type": "string",
						"enum": [
							"FULL_CALENDAR_EVENT_LIST_FETCH_PENDING",
							"PARTIAL_CALENDAR_EVENT_LIST_FETCH_PENDING",
							"CALENDAR_EVENT_LIST_FETCH_ONGOING",
							"CALENDAR_EVENTS_IMPORT_PENDING",
							"CALENDAR_EVENTS_IMPORT_ONGOING",
							"FAILED"
						],
						"description": "Sync stage"
					},
					"visibility": {
						"type": "string",
						"enum": ["METADATA", "SHARE_EVERYTHING"],
						"description": "Visibility"
					},
					"isContactAutoCreationEnabled": {
						"type": "boolean",
						"description": "Is Contact Auto Creation Enabled"
					},
					"contactAutoCreationPolicy": {
						"type": "string",
						"enum": ["AS_PARTICIPANT_AND_ORGANIZER", "AS_PARTICIPANT", "AS_ORGANIZER", "NONE"],
						"description": "Automatically create records for people you participated with in an event."
					},
					"isSyncEnabled": { "type": "boolean", "description": "Is Sync Enabled" },
					"syncCursor": {
						"type": "string",
						"description": "Sync Cursor. Used for syncing events from the calendar provider"
					},
					"syncedAt": { "type": "string", "format": "date-time", "description": "Last sync date" },
					"syncStageStartedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Sync stage started at"
					},
					"throttleFailureCount": { "type": "integer", "description": "Throttle Failure Count" },
					"connectedAccountId": { "type": "string", "format": "uuid" }
				},
				"example": {
					"syncStatus": "ONGOING",
					"syncStage": "FULL_CALENDAR_EVENT_LIST_FETCH_PENDING",
					"visibility": "METADATA",
					"contactAutoCreationPolicy": "AS_PARTICIPANT_AND_ORGANIZER"
				}
			},
			"CalendarChannelForUpdate": {
				"type": "object",
				"description": "Calendar Channels",
				"properties": {
					"handle": { "type": "string", "description": "Handle" },
					"syncStatus": {
						"type": "string",
						"enum": [
							"ONGOING",
							"NOT_SYNCED",
							"ACTIVE",
							"FAILED_INSUFFICIENT_PERMISSIONS",
							"FAILED_UNKNOWN"
						],
						"description": "Sync status"
					},
					"syncStage": {
						"type": "string",
						"enum": [
							"FULL_CALENDAR_EVENT_LIST_FETCH_PENDING",
							"PARTIAL_CALENDAR_EVENT_LIST_FETCH_PENDING",
							"CALENDAR_EVENT_LIST_FETCH_ONGOING",
							"CALENDAR_EVENTS_IMPORT_PENDING",
							"CALENDAR_EVENTS_IMPORT_ONGOING",
							"FAILED"
						],
						"description": "Sync stage"
					},
					"visibility": {
						"type": "string",
						"enum": ["METADATA", "SHARE_EVERYTHING"],
						"description": "Visibility"
					},
					"isContactAutoCreationEnabled": {
						"type": "boolean",
						"description": "Is Contact Auto Creation Enabled"
					},
					"contactAutoCreationPolicy": {
						"type": "string",
						"enum": ["AS_PARTICIPANT_AND_ORGANIZER", "AS_PARTICIPANT", "AS_ORGANIZER", "NONE"],
						"description": "Automatically create records for people you participated with in an event."
					},
					"isSyncEnabled": { "type": "boolean", "description": "Is Sync Enabled" },
					"syncCursor": {
						"type": "string",
						"description": "Sync Cursor. Used for syncing events from the calendar provider"
					},
					"syncedAt": { "type": "string", "format": "date-time", "description": "Last sync date" },
					"syncStageStartedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Sync stage started at"
					},
					"throttleFailureCount": { "type": "integer", "description": "Throttle Failure Count" },
					"connectedAccountId": { "type": "string", "format": "uuid" }
				},
				"example": {
					"syncStatus": "ONGOING",
					"syncStage": "FULL_CALENDAR_EVENT_LIST_FETCH_PENDING",
					"visibility": "METADATA",
					"contactAutoCreationPolicy": "AS_PARTICIPANT_AND_ORGANIZER"
				}
			},
			"CalendarChannelForResponse": {
				"type": "object",
				"description": "Calendar Channels",
				"properties": {
					"handle": { "type": "string", "description": "Handle" },
					"syncStatus": {
						"type": "string",
						"enum": [
							"ONGOING",
							"NOT_SYNCED",
							"ACTIVE",
							"FAILED_INSUFFICIENT_PERMISSIONS",
							"FAILED_UNKNOWN"
						],
						"description": "Sync status"
					},
					"syncStage": {
						"type": "string",
						"enum": [
							"FULL_CALENDAR_EVENT_LIST_FETCH_PENDING",
							"PARTIAL_CALENDAR_EVENT_LIST_FETCH_PENDING",
							"CALENDAR_EVENT_LIST_FETCH_ONGOING",
							"CALENDAR_EVENTS_IMPORT_PENDING",
							"CALENDAR_EVENTS_IMPORT_ONGOING",
							"FAILED"
						],
						"description": "Sync stage"
					},
					"visibility": {
						"type": "string",
						"enum": ["METADATA", "SHARE_EVERYTHING"],
						"description": "Visibility"
					},
					"isContactAutoCreationEnabled": {
						"type": "boolean",
						"description": "Is Contact Auto Creation Enabled"
					},
					"contactAutoCreationPolicy": {
						"type": "string",
						"enum": ["AS_PARTICIPANT_AND_ORGANIZER", "AS_PARTICIPANT", "AS_ORGANIZER", "NONE"],
						"description": "Automatically create records for people you participated with in an event."
					},
					"isSyncEnabled": { "type": "boolean", "description": "Is Sync Enabled" },
					"syncCursor": {
						"type": "string",
						"description": "Sync Cursor. Used for syncing events from the calendar provider"
					},
					"syncedAt": { "type": "string", "format": "date-time", "description": "Last sync date" },
					"syncStageStartedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Sync stage started at"
					},
					"throttleFailureCount": { "type": "integer", "description": "Throttle Failure Count" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"connectedAccountId": { "type": "string", "format": "uuid" },
					"calendarChannelEventAssociations": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse" },
						"description": "Calendar Channel Event Associations"
					},
					"connectedAccount": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/ConnectedAccountForResponse" }],
						"description": "Connected Account"
					}
				}
			},
			"CalendarEventParticipant": {
				"type": "object",
				"description": "Calendar event participants",
				"properties": {
					"personId": { "type": "string", "format": "uuid" },
					"displayName": { "type": "string", "description": "Display Name" },
					"isOrganizer": { "type": "boolean", "description": "Is Organizer" },
					"calendarEventId": { "type": "string", "format": "uuid" },
					"responseStatus": {
						"type": "string",
						"enum": ["NEEDS_ACTION", "DECLINED", "TENTATIVE", "ACCEPTED"],
						"description": "Response Status"
					},
					"handle": { "type": "string", "description": "Handle" },
					"workspaceMemberId": { "type": "string", "format": "uuid" }
				},
				"example": { "responseStatus": "NEEDS_ACTION" }
			},
			"CalendarEventParticipantForUpdate": {
				"type": "object",
				"description": "Calendar event participants",
				"properties": {
					"personId": { "type": "string", "format": "uuid" },
					"displayName": { "type": "string", "description": "Display Name" },
					"isOrganizer": { "type": "boolean", "description": "Is Organizer" },
					"calendarEventId": { "type": "string", "format": "uuid" },
					"responseStatus": {
						"type": "string",
						"enum": ["NEEDS_ACTION", "DECLINED", "TENTATIVE", "ACCEPTED"],
						"description": "Response Status"
					},
					"handle": { "type": "string", "description": "Handle" },
					"workspaceMemberId": { "type": "string", "format": "uuid" }
				},
				"example": { "responseStatus": "NEEDS_ACTION" }
			},
			"CalendarEventParticipantForResponse": {
				"type": "object",
				"description": "Calendar event participants",
				"properties": {
					"personId": { "type": "string", "format": "uuid" },
					"displayName": { "type": "string", "description": "Display Name" },
					"isOrganizer": { "type": "boolean", "description": "Is Organizer" },
					"calendarEventId": { "type": "string", "format": "uuid" },
					"responseStatus": {
						"type": "string",
						"enum": ["NEEDS_ACTION", "DECLINED", "TENTATIVE", "ACCEPTED"],
						"description": "Response Status"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"handle": { "type": "string", "description": "Handle" },
					"workspaceMemberId": { "type": "string", "format": "uuid" },
					"person": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/PersonForResponse" }],
						"description": "Person"
					},
					"calendarEvent": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/CalendarEventForResponse" }],
						"description": "Event ID"
					},
					"workspaceMember": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkspaceMemberForResponse" }],
						"description": "Workspace Member"
					}
				}
			},
			"CalendarEvent": {
				"type": "object",
				"description": "Calendar events",
				"properties": {
					"conferenceLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "Meet Link"
					},
					"location": { "type": "string", "description": "Location" },
					"iCalUID": { "type": "string", "description": "iCal UID" },
					"description": { "type": "string", "description": "Description" },
					"externalUpdatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Update DateTime"
					},
					"externalCreatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Creation DateTime"
					},
					"endsAt": { "type": "string", "format": "date-time", "description": "End Date" },
					"startsAt": { "type": "string", "format": "date-time", "description": "Start Date" },
					"isFullDay": { "type": "boolean", "description": "Is Full Day" },
					"isCanceled": { "type": "boolean", "description": "Is canceled" },
					"title": { "type": "string", "description": "Title" },
					"conferenceSolution": { "type": "string", "description": "Conference Solution" }
				},
				"example": {
					"conferenceLink": {
						"primaryLinkLabel": "",
						"primaryLinkUrl": "https://cumbersome-petal.info/",
						"additionalLinks": []
					}
				}
			},
			"CalendarEventForUpdate": {
				"type": "object",
				"description": "Calendar events",
				"properties": {
					"conferenceLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "Meet Link"
					},
					"location": { "type": "string", "description": "Location" },
					"iCalUID": { "type": "string", "description": "iCal UID" },
					"description": { "type": "string", "description": "Description" },
					"externalUpdatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Update DateTime"
					},
					"externalCreatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Creation DateTime"
					},
					"endsAt": { "type": "string", "format": "date-time", "description": "End Date" },
					"startsAt": { "type": "string", "format": "date-time", "description": "Start Date" },
					"isFullDay": { "type": "boolean", "description": "Is Full Day" },
					"isCanceled": { "type": "boolean", "description": "Is canceled" },
					"title": { "type": "string", "description": "Title" },
					"conferenceSolution": { "type": "string", "description": "Conference Solution" }
				},
				"example": {
					"conferenceLink": {
						"primaryLinkLabel": "",
						"primaryLinkUrl": "https://dutiful-plastic.org/",
						"additionalLinks": []
					}
				}
			},
			"CalendarEventForResponse": {
				"type": "object",
				"description": "Calendar events",
				"properties": {
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"conferenceLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "Meet Link"
					},
					"location": { "type": "string", "description": "Location" },
					"iCalUID": { "type": "string", "description": "iCal UID" },
					"description": { "type": "string", "description": "Description" },
					"externalUpdatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Update DateTime"
					},
					"externalCreatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Creation DateTime"
					},
					"endsAt": { "type": "string", "format": "date-time", "description": "End Date" },
					"startsAt": { "type": "string", "format": "date-time", "description": "Start Date" },
					"isFullDay": { "type": "boolean", "description": "Is Full Day" },
					"isCanceled": { "type": "boolean", "description": "Is canceled" },
					"title": { "type": "string", "description": "Title" },
					"conferenceSolution": { "type": "string", "description": "Conference Solution" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"calendarChannelEventAssociations": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse" },
						"description": "Calendar Channel Event Associations"
					},
					"calendarEventParticipants": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/CalendarEventParticipantForResponse" },
						"description": "Event Participants"
					}
				}
			},
			"Company": {
				"type": "object",
				"description": "A company",
				"properties": {
					"name": { "type": "string", "description": "The company name" },
					"domainName": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "The company website URL. We use this url to fetch the company icon"
					},
					"employees": { "type": "integer", "description": "Number of employees in the company" },
					"linkedinLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "The company Linkedin account"
					},
					"xLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "The company Twitter/X account"
					},
					"annualRecurringRevenue": {
						"type": "object",
						"properties": {
							"amountMicros": { "type": "number" },
							"currencyCode": { "type": "string" }
						},
						"description": "Annual Recurring Revenue: The actual or estimated annual revenue of the company"
					},
					"address": {
						"type": "object",
						"properties": {
							"addressStreet1": { "type": "string" },
							"addressStreet2": { "type": "string" },
							"addressCity": { "type": "string" },
							"addressPostcode": { "type": "string" },
							"addressState": { "type": "string" },
							"addressCountry": { "type": "string" },
							"addressLat": { "type": "number" },
							"addressLng": { "type": "number" }
						},
						"description": "Address of the company"
					},
					"idealCustomerProfile": {
						"type": "boolean",
						"description": "Ideal Customer Profile:  Indicates whether the company is the most suitable and valuable customer for you"
					},
					"position": { "type": "number", "description": "Company record position" },
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The creator of the record"
					},
					"accountOwnerId": { "type": "string", "format": "uuid" }
				},
				"example": {
					"name": "Company name",
					"domainName": {
						"primaryLinkLabel": "",
						"primaryLinkUrl": "https://right-hydrolyse.info/",
						"additionalLinks": []
					},
					"linkedinLink": {
						"primaryLinkLabel": "",
						"primaryLinkUrl": "https://evil-shoulder.biz/",
						"additionalLinks": []
					},
					"xLink": {
						"primaryLinkLabel": "",
						"primaryLinkUrl": "https://sturdy-subexpression.org",
						"additionalLinks": []
					},
					"annualRecurringRevenue": { "amountMicros": 344000000, "currencyCode": "EUR" }
				}
			},
			"CompanyForUpdate": {
				"type": "object",
				"description": "A company",
				"properties": {
					"name": { "type": "string", "description": "The company name" },
					"domainName": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "The company website URL. We use this url to fetch the company icon"
					},
					"employees": { "type": "integer", "description": "Number of employees in the company" },
					"linkedinLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "The company Linkedin account"
					},
					"xLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "The company Twitter/X account"
					},
					"annualRecurringRevenue": {
						"type": "object",
						"properties": {
							"amountMicros": { "type": "number" },
							"currencyCode": { "type": "string" }
						},
						"description": "Annual Recurring Revenue: The actual or estimated annual revenue of the company"
					},
					"address": {
						"type": "object",
						"properties": {
							"addressStreet1": { "type": "string" },
							"addressStreet2": { "type": "string" },
							"addressCity": { "type": "string" },
							"addressPostcode": { "type": "string" },
							"addressState": { "type": "string" },
							"addressCountry": { "type": "string" },
							"addressLat": { "type": "number" },
							"addressLng": { "type": "number" }
						},
						"description": "Address of the company"
					},
					"idealCustomerProfile": {
						"type": "boolean",
						"description": "Ideal Customer Profile:  Indicates whether the company is the most suitable and valuable customer for you"
					},
					"position": { "type": "number", "description": "Company record position" },
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The creator of the record"
					},
					"accountOwnerId": { "type": "string", "format": "uuid" }
				},
				"example": {
					"name": "Company name",
					"domainName": {
						"primaryLinkLabel": "",
						"primaryLinkUrl": "https://clean-verve.name",
						"additionalLinks": []
					},
					"linkedinLink": {
						"primaryLinkLabel": "",
						"primaryLinkUrl": "https://optimal-scenario.biz",
						"additionalLinks": []
					},
					"xLink": {
						"primaryLinkLabel": "",
						"primaryLinkUrl": "https://illiterate-forgery.biz",
						"additionalLinks": []
					},
					"annualRecurringRevenue": { "amountMicros": 753000000, "currencyCode": "EUR" }
				}
			},
			"CompanyForResponse": {
				"type": "object",
				"description": "A company",
				"properties": {
					"name": { "type": "string", "description": "The company name" },
					"domainName": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "The company website URL. We use this url to fetch the company icon"
					},
					"employees": { "type": "integer", "description": "Number of employees in the company" },
					"linkedinLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "The company Linkedin account"
					},
					"xLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "The company Twitter/X account"
					},
					"annualRecurringRevenue": {
						"type": "object",
						"properties": {
							"amountMicros": { "type": "number" },
							"currencyCode": { "type": "string" }
						},
						"description": "Annual Recurring Revenue: The actual or estimated annual revenue of the company"
					},
					"address": {
						"type": "object",
						"properties": {
							"addressStreet1": { "type": "string" },
							"addressStreet2": { "type": "string" },
							"addressCity": { "type": "string" },
							"addressPostcode": { "type": "string" },
							"addressState": { "type": "string" },
							"addressCountry": { "type": "string" },
							"addressLat": { "type": "number" },
							"addressLng": { "type": "number" }
						},
						"description": "Address of the company"
					},
					"idealCustomerProfile": {
						"type": "boolean",
						"description": "Ideal Customer Profile:  Indicates whether the company is the most suitable and valuable customer for you"
					},
					"position": { "type": "number", "description": "Company record position" },
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							},
							"workspaceMemberId": { "type": "string", "format": "uuid" },
							"name": { "type": "string" }
						},
						"description": "The creator of the record"
					},
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"accountOwnerId": { "type": "string", "format": "uuid" },
					"people": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/PersonForResponse" },
						"description": "People linked to the company."
					},
					"timelineActivities": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TimelineActivityForResponse" },
						"description": "Timeline Activities linked to the company"
					},
					"attachments": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/AttachmentForResponse" },
						"description": "Attachments linked to the company"
					},
					"favorites": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/FavoriteForResponse" },
						"description": "Favorites linked to the company"
					},
					"opportunities": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/OpportunityForResponse" },
						"description": "Opportunities linked to the company."
					},
					"noteTargets": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/NoteTargetForResponse" },
						"description": "Notes tied to the company"
					},
					"taskTargets": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TaskTargetForResponse" },
						"description": "Tasks tied to the company"
					},
					"accountOwner": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkspaceMemberForResponse" }],
						"description": "Your team member responsible for managing the company account"
					}
				}
			},
			"ConnectedAccount": {
				"type": "object",
				"description": "A connected account",
				"properties": {
					"handle": {
						"type": "string",
						"description": "The account handle (email, username, phone number, etc.)"
					},
					"provider": { "type": "string", "description": "The account provider" },
					"accessToken": { "type": "string", "description": "Messaging provider access token" },
					"refreshToken": { "type": "string", "description": "Messaging provider refresh token" },
					"lastSyncHistoryId": { "type": "string", "description": "Last sync history ID" },
					"authFailedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Auth failed at"
					},
					"handleAliases": { "type": "string", "description": "Handle Aliases" },
					"scopes": { "type": "array", "items": { "type": "string" }, "description": "Scopes" },
					"accountOwnerId": { "type": "string", "format": "uuid" }
				},
				"example": {}
			},
			"ConnectedAccountForUpdate": {
				"type": "object",
				"description": "A connected account",
				"properties": {
					"handle": {
						"type": "string",
						"description": "The account handle (email, username, phone number, etc.)"
					},
					"provider": { "type": "string", "description": "The account provider" },
					"accessToken": { "type": "string", "description": "Messaging provider access token" },
					"refreshToken": { "type": "string", "description": "Messaging provider refresh token" },
					"lastSyncHistoryId": { "type": "string", "description": "Last sync history ID" },
					"authFailedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Auth failed at"
					},
					"handleAliases": { "type": "string", "description": "Handle Aliases" },
					"scopes": { "type": "array", "items": { "type": "string" }, "description": "Scopes" },
					"accountOwnerId": { "type": "string", "format": "uuid" }
				},
				"example": {}
			},
			"ConnectedAccountForResponse": {
				"type": "object",
				"description": "A connected account",
				"properties": {
					"handle": {
						"type": "string",
						"description": "The account handle (email, username, phone number, etc.)"
					},
					"provider": { "type": "string", "description": "The account provider" },
					"accessToken": { "type": "string", "description": "Messaging provider access token" },
					"refreshToken": { "type": "string", "description": "Messaging provider refresh token" },
					"lastSyncHistoryId": { "type": "string", "description": "Last sync history ID" },
					"authFailedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Auth failed at"
					},
					"handleAliases": { "type": "string", "description": "Handle Aliases" },
					"scopes": { "type": "array", "items": { "type": "string" }, "description": "Scopes" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"accountOwnerId": { "type": "string", "format": "uuid" },
					"calendarChannels": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/CalendarChannelForResponse" },
						"description": "Calendar Channels"
					},
					"messageChannels": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/MessageChannelForResponse" },
						"description": "Message Channels"
					},
					"accountOwner": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkspaceMemberForResponse" }],
						"description": "Account Owner"
					}
				}
			},
			"FavoriteFolder": {
				"type": "object",
				"description": "A Folder of favorites",
				"properties": {
					"position": { "type": "integer", "description": "Favorite folder position" },
					"name": { "type": "string", "description": "Name of the favorite folder" }
				},
				"example": { "name": "Favorite Folder name" }
			},
			"FavoriteFolderForUpdate": {
				"type": "object",
				"description": "A Folder of favorites",
				"properties": {
					"position": { "type": "integer", "description": "Favorite folder position" },
					"name": { "type": "string", "description": "Name of the favorite folder" }
				},
				"example": { "name": "Favorite Folder name" }
			},
			"FavoriteFolderForResponse": {
				"type": "object",
				"description": "A Folder of favorites",
				"properties": {
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"position": { "type": "integer", "description": "Favorite folder position" },
					"name": { "type": "string", "description": "Name of the favorite folder" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"favorites": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/FavoriteForResponse" },
						"description": "Favorites in this folder"
					}
				}
			},
			"Favorite": {
				"type": "object",
				"description": "A favorite that can be accessed from the left menu",
				"properties": {
					"viewId": { "type": "string", "format": "uuid" },
					"noteId": { "type": "string", "format": "uuid" },
					"workflowRunId": { "type": "string", "format": "uuid" },
					"taskId": { "type": "string", "format": "uuid" },
					"workflowVersionId": { "type": "string", "format": "uuid" },
					"workflowId": { "type": "string", "format": "uuid" },
					"opportunityId": { "type": "string", "format": "uuid" },
					"favoriteFolderId": { "type": "string", "format": "uuid" },
					"companyId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" },
					"forWorkspaceMemberId": { "type": "string", "format": "uuid" },
					"position": { "type": "integer", "description": "Favorite position" }
				},
				"example": {}
			},
			"FavoriteForUpdate": {
				"type": "object",
				"description": "A favorite that can be accessed from the left menu",
				"properties": {
					"viewId": { "type": "string", "format": "uuid" },
					"noteId": { "type": "string", "format": "uuid" },
					"workflowRunId": { "type": "string", "format": "uuid" },
					"taskId": { "type": "string", "format": "uuid" },
					"workflowVersionId": { "type": "string", "format": "uuid" },
					"workflowId": { "type": "string", "format": "uuid" },
					"opportunityId": { "type": "string", "format": "uuid" },
					"favoriteFolderId": { "type": "string", "format": "uuid" },
					"companyId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" },
					"forWorkspaceMemberId": { "type": "string", "format": "uuid" },
					"position": { "type": "integer", "description": "Favorite position" }
				},
				"example": {}
			},
			"FavoriteForResponse": {
				"type": "object",
				"description": "A favorite that can be accessed from the left menu",
				"properties": {
					"viewId": { "type": "string", "format": "uuid" },
					"noteId": { "type": "string", "format": "uuid" },
					"workflowRunId": { "type": "string", "format": "uuid" },
					"taskId": { "type": "string", "format": "uuid" },
					"workflowVersionId": { "type": "string", "format": "uuid" },
					"workflowId": { "type": "string", "format": "uuid" },
					"opportunityId": { "type": "string", "format": "uuid" },
					"favoriteFolderId": { "type": "string", "format": "uuid" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"companyId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" },
					"forWorkspaceMemberId": { "type": "string", "format": "uuid" },
					"position": { "type": "integer", "description": "Favorite position" },
					"view": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/ViewForResponse" }],
						"description": "Favorite view"
					},
					"note": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/NoteForResponse" }],
						"description": "Favorite note"
					},
					"workflowRun": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkflowRunForResponse" }],
						"description": "Favorite workflow run"
					},
					"task": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/TaskForResponse" }],
						"description": "Favorite task"
					},
					"workflowVersion": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkflowVersionForResponse" }],
						"description": "Favorite workflow version"
					},
					"workflow": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkflowForResponse" }],
						"description": "Favorite workflow"
					},
					"opportunity": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/OpportunityForResponse" }],
						"description": "Favorite opportunity"
					},
					"favoriteFolder": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/FavoriteFolderForResponse" }],
						"description": "The folder this favorite belongs to"
					},
					"company": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/CompanyForResponse" }],
						"description": "Favorite company"
					},
					"person": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/PersonForResponse" }],
						"description": "Favorite person"
					},
					"forWorkspaceMember": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkspaceMemberForResponse" }],
						"description": "Favorite workspace member"
					}
				}
			},
			"MessageChannelMessageAssociation": {
				"type": "object",
				"description": "Message Synced with a Message Channel",
				"properties": {
					"messageExternalId": {
						"type": "string",
						"description": "Message id from the messaging provider"
					},
					"messageChannelId": { "type": "string", "format": "uuid" },
					"messageId": { "type": "string", "format": "uuid" },
					"direction": {
						"type": "string",
						"enum": ["INCOMING", "OUTGOING"],
						"description": "Message Direction"
					},
					"messageThreadExternalId": {
						"type": "string",
						"description": "Thread id from the messaging provider"
					}
				},
				"example": { "direction": "INCOMING" }
			},
			"MessageChannelMessageAssociationForUpdate": {
				"type": "object",
				"description": "Message Synced with a Message Channel",
				"properties": {
					"messageExternalId": {
						"type": "string",
						"description": "Message id from the messaging provider"
					},
					"messageChannelId": { "type": "string", "format": "uuid" },
					"messageId": { "type": "string", "format": "uuid" },
					"direction": {
						"type": "string",
						"enum": ["INCOMING", "OUTGOING"],
						"description": "Message Direction"
					},
					"messageThreadExternalId": {
						"type": "string",
						"description": "Thread id from the messaging provider"
					}
				},
				"example": { "direction": "INCOMING" }
			},
			"MessageChannelMessageAssociationForResponse": {
				"type": "object",
				"description": "Message Synced with a Message Channel",
				"properties": {
					"messageExternalId": {
						"type": "string",
						"description": "Message id from the messaging provider"
					},
					"messageChannelId": { "type": "string", "format": "uuid" },
					"messageId": { "type": "string", "format": "uuid" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"direction": {
						"type": "string",
						"enum": ["INCOMING", "OUTGOING"],
						"description": "Message Direction"
					},
					"messageThreadExternalId": {
						"type": "string",
						"description": "Thread id from the messaging provider"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"messageChannel": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/MessageChannelForResponse" }],
						"description": "Message Channel Id"
					},
					"message": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/MessageForResponse" }],
						"description": "Message Id"
					}
				}
			},
			"MessageChannel": {
				"type": "object",
				"description": "Message Channels",
				"properties": {
					"syncedAt": { "type": "string", "format": "date-time", "description": "Last sync date" },
					"connectedAccountId": { "type": "string", "format": "uuid" },
					"throttleFailureCount": { "type": "integer", "description": "Throttle Failure Count" },
					"syncStageStartedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Sync stage started at"
					},
					"syncStage": {
						"type": "string",
						"enum": [
							"FULL_MESSAGE_LIST_FETCH_PENDING",
							"PARTIAL_MESSAGE_LIST_FETCH_PENDING",
							"MESSAGE_LIST_FETCH_ONGOING",
							"MESSAGES_IMPORT_PENDING",
							"MESSAGES_IMPORT_ONGOING",
							"FAILED"
						],
						"description": "Sync stage"
					},
					"syncStatus": {
						"type": "string",
						"enum": [
							"ONGOING",
							"NOT_SYNCED",
							"ACTIVE",
							"FAILED_INSUFFICIENT_PERMISSIONS",
							"FAILED_UNKNOWN"
						],
						"description": "Sync status"
					},
					"syncCursor": { "type": "string", "description": "Last sync cursor" },
					"isSyncEnabled": { "type": "boolean", "description": "Is Sync Enabled" },
					"excludeGroupEmails": { "type": "boolean", "description": "Exclude group emails" },
					"excludeNonProfessionalEmails": {
						"type": "boolean",
						"description": "Exclude non professional emails"
					},
					"contactAutoCreationPolicy": {
						"type": "string",
						"enum": ["SENT_AND_RECEIVED", "SENT", "NONE"],
						"description": "Automatically create People records when receiving or sending emails"
					},
					"isContactAutoCreationEnabled": {
						"type": "boolean",
						"description": "Is Contact Auto Creation Enabled"
					},
					"type": { "type": "string", "enum": ["email", "sms"], "description": "Channel Type" },
					"handle": { "type": "string", "description": "Handle" },
					"visibility": {
						"type": "string",
						"enum": ["METADATA", "SUBJECT", "SHARE_EVERYTHING"],
						"description": "Visibility"
					}
				},
				"example": {
					"syncStage": "FULL_MESSAGE_LIST_FETCH_PENDING",
					"syncStatus": "ONGOING",
					"contactAutoCreationPolicy": "SENT_AND_RECEIVED",
					"type": "email",
					"visibility": "METADATA"
				}
			},
			"MessageChannelForUpdate": {
				"type": "object",
				"description": "Message Channels",
				"properties": {
					"syncedAt": { "type": "string", "format": "date-time", "description": "Last sync date" },
					"connectedAccountId": { "type": "string", "format": "uuid" },
					"throttleFailureCount": { "type": "integer", "description": "Throttle Failure Count" },
					"syncStageStartedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Sync stage started at"
					},
					"syncStage": {
						"type": "string",
						"enum": [
							"FULL_MESSAGE_LIST_FETCH_PENDING",
							"PARTIAL_MESSAGE_LIST_FETCH_PENDING",
							"MESSAGE_LIST_FETCH_ONGOING",
							"MESSAGES_IMPORT_PENDING",
							"MESSAGES_IMPORT_ONGOING",
							"FAILED"
						],
						"description": "Sync stage"
					},
					"syncStatus": {
						"type": "string",
						"enum": [
							"ONGOING",
							"NOT_SYNCED",
							"ACTIVE",
							"FAILED_INSUFFICIENT_PERMISSIONS",
							"FAILED_UNKNOWN"
						],
						"description": "Sync status"
					},
					"syncCursor": { "type": "string", "description": "Last sync cursor" },
					"isSyncEnabled": { "type": "boolean", "description": "Is Sync Enabled" },
					"excludeGroupEmails": { "type": "boolean", "description": "Exclude group emails" },
					"excludeNonProfessionalEmails": {
						"type": "boolean",
						"description": "Exclude non professional emails"
					},
					"contactAutoCreationPolicy": {
						"type": "string",
						"enum": ["SENT_AND_RECEIVED", "SENT", "NONE"],
						"description": "Automatically create People records when receiving or sending emails"
					},
					"isContactAutoCreationEnabled": {
						"type": "boolean",
						"description": "Is Contact Auto Creation Enabled"
					},
					"type": { "type": "string", "enum": ["email", "sms"], "description": "Channel Type" },
					"handle": { "type": "string", "description": "Handle" },
					"visibility": {
						"type": "string",
						"enum": ["METADATA", "SUBJECT", "SHARE_EVERYTHING"],
						"description": "Visibility"
					}
				},
				"example": {
					"syncStage": "FULL_MESSAGE_LIST_FETCH_PENDING",
					"syncStatus": "ONGOING",
					"contactAutoCreationPolicy": "SENT_AND_RECEIVED",
					"type": "email",
					"visibility": "METADATA"
				}
			},
			"MessageChannelForResponse": {
				"type": "object",
				"description": "Message Channels",
				"properties": {
					"syncedAt": { "type": "string", "format": "date-time", "description": "Last sync date" },
					"connectedAccountId": { "type": "string", "format": "uuid" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"throttleFailureCount": { "type": "integer", "description": "Throttle Failure Count" },
					"syncStageStartedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Sync stage started at"
					},
					"syncStage": {
						"type": "string",
						"enum": [
							"FULL_MESSAGE_LIST_FETCH_PENDING",
							"PARTIAL_MESSAGE_LIST_FETCH_PENDING",
							"MESSAGE_LIST_FETCH_ONGOING",
							"MESSAGES_IMPORT_PENDING",
							"MESSAGES_IMPORT_ONGOING",
							"FAILED"
						],
						"description": "Sync stage"
					},
					"syncStatus": {
						"type": "string",
						"enum": [
							"ONGOING",
							"NOT_SYNCED",
							"ACTIVE",
							"FAILED_INSUFFICIENT_PERMISSIONS",
							"FAILED_UNKNOWN"
						],
						"description": "Sync status"
					},
					"syncCursor": { "type": "string", "description": "Last sync cursor" },
					"isSyncEnabled": { "type": "boolean", "description": "Is Sync Enabled" },
					"excludeGroupEmails": { "type": "boolean", "description": "Exclude group emails" },
					"excludeNonProfessionalEmails": {
						"type": "boolean",
						"description": "Exclude non professional emails"
					},
					"contactAutoCreationPolicy": {
						"type": "string",
						"enum": ["SENT_AND_RECEIVED", "SENT", "NONE"],
						"description": "Automatically create People records when receiving or sending emails"
					},
					"isContactAutoCreationEnabled": {
						"type": "boolean",
						"description": "Is Contact Auto Creation Enabled"
					},
					"type": { "type": "string", "enum": ["email", "sms"], "description": "Channel Type" },
					"handle": { "type": "string", "description": "Handle" },
					"visibility": {
						"type": "string",
						"enum": ["METADATA", "SUBJECT", "SHARE_EVERYTHING"],
						"description": "Visibility"
					},
					"connectedAccount": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/ConnectedAccountForResponse" }],
						"description": "Connected Account"
					},
					"messageChannelMessageAssociations": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse" },
						"description": "Messages from the channel."
					},
					"messageFolders": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/MessageFolderForResponse" },
						"description": "Message Folders"
					}
				}
			},
			"MessageFolder": {
				"type": "object",
				"description": "Folder for Message Channel",
				"properties": {
					"messageChannelId": { "type": "string", "format": "uuid" },
					"name": { "type": "string", "description": "Folder name" },
					"syncCursor": { "type": "string", "description": "Sync Cursor" }
				},
				"example": { "name": "Message Folder name" }
			},
			"MessageFolderForUpdate": {
				"type": "object",
				"description": "Folder for Message Channel",
				"properties": {
					"messageChannelId": { "type": "string", "format": "uuid" },
					"name": { "type": "string", "description": "Folder name" },
					"syncCursor": { "type": "string", "description": "Sync Cursor" }
				},
				"example": { "name": "Message Folder name" }
			},
			"MessageFolderForResponse": {
				"type": "object",
				"description": "Folder for Message Channel",
				"properties": {
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"messageChannelId": { "type": "string", "format": "uuid" },
					"name": { "type": "string", "description": "Folder name" },
					"syncCursor": { "type": "string", "description": "Sync Cursor" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"messageChannel": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/MessageChannelForResponse" }],
						"description": "Message Channel"
					}
				}
			},
			"MessageParticipant": {
				"type": "object",
				"description": "Message Participants",
				"properties": {
					"displayName": { "type": "string", "description": "Display Name" },
					"handle": { "type": "string", "description": "Handle" },
					"role": { "type": "string", "enum": ["from", "to", "cc", "bcc"], "description": "Role" },
					"workspaceMemberId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" },
					"messageId": { "type": "string", "format": "uuid" }
				},
				"example": { "role": "from" }
			},
			"MessageParticipantForUpdate": {
				"type": "object",
				"description": "Message Participants",
				"properties": {
					"displayName": { "type": "string", "description": "Display Name" },
					"handle": { "type": "string", "description": "Handle" },
					"role": { "type": "string", "enum": ["from", "to", "cc", "bcc"], "description": "Role" },
					"workspaceMemberId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" },
					"messageId": { "type": "string", "format": "uuid" }
				},
				"example": { "role": "from" }
			},
			"MessageParticipantForResponse": {
				"type": "object",
				"description": "Message Participants",
				"properties": {
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"displayName": { "type": "string", "description": "Display Name" },
					"handle": { "type": "string", "description": "Handle" },
					"role": { "type": "string", "enum": ["from", "to", "cc", "bcc"], "description": "Role" },
					"workspaceMemberId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" },
					"messageId": { "type": "string", "format": "uuid" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"workspaceMember": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkspaceMemberForResponse" }],
						"description": "Workspace member"
					},
					"person": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/PersonForResponse" }],
						"description": "Person"
					},
					"message": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/MessageForResponse" }],
						"description": "Message"
					}
				}
			},
			"Message": {
				"type": "object",
				"description": "A message sent or received through a messaging channel (email, chat, etc.)",
				"properties": {
					"headerMessageId": {
						"type": "string",
						"description": "Message id from the message header"
					},
					"subject": { "type": "string", "description": "Subject" },
					"text": { "type": "string", "description": "Text" },
					"messageThreadId": { "type": "string", "format": "uuid" },
					"receivedAt": {
						"type": "string",
						"format": "date-time",
						"description": "The date the message was received"
					}
				},
				"example": {}
			},
			"MessageForUpdate": {
				"type": "object",
				"description": "A message sent or received through a messaging channel (email, chat, etc.)",
				"properties": {
					"headerMessageId": {
						"type": "string",
						"description": "Message id from the message header"
					},
					"subject": { "type": "string", "description": "Subject" },
					"text": { "type": "string", "description": "Text" },
					"messageThreadId": { "type": "string", "format": "uuid" },
					"receivedAt": {
						"type": "string",
						"format": "date-time",
						"description": "The date the message was received"
					}
				},
				"example": {}
			},
			"MessageForResponse": {
				"type": "object",
				"description": "A message sent or received through a messaging channel (email, chat, etc.)",
				"properties": {
					"headerMessageId": {
						"type": "string",
						"description": "Message id from the message header"
					},
					"subject": { "type": "string", "description": "Subject" },
					"text": { "type": "string", "description": "Text" },
					"messageThreadId": { "type": "string", "format": "uuid" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"receivedAt": {
						"type": "string",
						"format": "date-time",
						"description": "The date the message was received"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"messageChannelMessageAssociations": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse" },
						"description": "Messages from the channel."
					},
					"messageParticipants": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/MessageParticipantForResponse" },
						"description": "Message Participants"
					},
					"messageThread": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/MessageThreadForResponse" }],
						"description": "Message Thread Id"
					}
				}
			},
			"MessageThread": {
				"type": "object",
				"description": "A group of related messages (e.g. email thread, chat thread)",
				"properties": {},
				"example": {}
			},
			"MessageThreadForUpdate": {
				"type": "object",
				"description": "A group of related messages (e.g. email thread, chat thread)",
				"properties": {},
				"example": {}
			},
			"MessageThreadForResponse": {
				"type": "object",
				"description": "A group of related messages (e.g. email thread, chat thread)",
				"properties": {
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"messages": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/MessageForResponse" },
						"description": "Messages from the thread."
					}
				}
			},
			"Note": {
				"type": "object",
				"description": "A note",
				"properties": {
					"position": { "type": "number", "description": "Note record position" },
					"title": { "type": "string", "description": "Note title" },
					"body": { "type": "string", "description": "Note body" },
					"bodyV2": {
						"type": "object",
						"properties": { "blocknote": { "type": "string" }, "markdown": { "type": "string" } },
						"description": "Note body"
					},
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The creator of the record"
					}
				},
				"example": {}
			},
			"NoteForUpdate": {
				"type": "object",
				"description": "A note",
				"properties": {
					"position": { "type": "number", "description": "Note record position" },
					"title": { "type": "string", "description": "Note title" },
					"body": { "type": "string", "description": "Note body" },
					"bodyV2": {
						"type": "object",
						"properties": { "blocknote": { "type": "string" }, "markdown": { "type": "string" } },
						"description": "Note body"
					},
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The creator of the record"
					}
				},
				"example": {}
			},
			"NoteForResponse": {
				"type": "object",
				"description": "A note",
				"properties": {
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"position": { "type": "number", "description": "Note record position" },
					"title": { "type": "string", "description": "Note title" },
					"body": { "type": "string", "description": "Note body" },
					"bodyV2": {
						"type": "object",
						"properties": { "blocknote": { "type": "string" }, "markdown": { "type": "string" } },
						"description": "Note body"
					},
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							},
							"workspaceMemberId": { "type": "string", "format": "uuid" },
							"name": { "type": "string" }
						},
						"description": "The creator of the record"
					},
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"noteTargets": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/NoteTargetForResponse" },
						"description": "Note targets"
					},
					"attachments": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/AttachmentForResponse" },
						"description": "Note attachments"
					},
					"timelineActivities": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TimelineActivityForResponse" },
						"description": "Timeline Activities linked to the note."
					},
					"favorites": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/FavoriteForResponse" },
						"description": "Favorites linked to the note"
					}
				}
			},
			"NoteTarget": {
				"type": "object",
				"description": "A note target",
				"properties": {
					"noteId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" },
					"companyId": { "type": "string", "format": "uuid" },
					"opportunityId": { "type": "string", "format": "uuid" }
				},
				"example": {}
			},
			"NoteTargetForUpdate": {
				"type": "object",
				"description": "A note target",
				"properties": {
					"noteId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" },
					"companyId": { "type": "string", "format": "uuid" },
					"opportunityId": { "type": "string", "format": "uuid" }
				},
				"example": {}
			},
			"NoteTargetForResponse": {
				"type": "object",
				"description": "A note target",
				"properties": {
					"noteId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" },
					"companyId": { "type": "string", "format": "uuid" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"opportunityId": { "type": "string", "format": "uuid" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"note": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/NoteForResponse" }],
						"description": "NoteTarget note"
					},
					"person": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/PersonForResponse" }],
						"description": "NoteTarget person"
					},
					"company": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/CompanyForResponse" }],
						"description": "NoteTarget company"
					},
					"opportunity": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/OpportunityForResponse" }],
						"description": "NoteTarget opportunity"
					}
				}
			},
			"Opportunity": {
				"type": "object",
				"description": "An opportunity",
				"properties": {
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The creator of the record"
					},
					"closeDate": {
						"type": "string",
						"format": "date-time",
						"description": "Opportunity close date"
					},
					"stage": {
						"type": "string",
						"enum": ["NEW", "SCREENING", "MEETING", "PROPOSAL", "CUSTOMER"],
						"description": "Opportunity stage"
					},
					"position": { "type": "number", "description": "Opportunity record position" },
					"name": { "type": "string", "description": "The opportunity name" },
					"companyId": { "type": "string", "format": "uuid" },
					"amount": {
						"type": "object",
						"properties": {
							"amountMicros": { "type": "number" },
							"currencyCode": { "type": "string" }
						},
						"description": "Opportunity amount"
					},
					"pointOfContactId": { "type": "string", "format": "uuid" }
				},
				"example": {
					"stage": "NEW",
					"name": "Opportunity name",
					"amount": { "amountMicros": 488000000, "currencyCode": "EUR" }
				}
			},
			"OpportunityForUpdate": {
				"type": "object",
				"description": "An opportunity",
				"properties": {
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The creator of the record"
					},
					"closeDate": {
						"type": "string",
						"format": "date-time",
						"description": "Opportunity close date"
					},
					"stage": {
						"type": "string",
						"enum": ["NEW", "SCREENING", "MEETING", "PROPOSAL", "CUSTOMER"],
						"description": "Opportunity stage"
					},
					"position": { "type": "number", "description": "Opportunity record position" },
					"name": { "type": "string", "description": "The opportunity name" },
					"companyId": { "type": "string", "format": "uuid" },
					"amount": {
						"type": "object",
						"properties": {
							"amountMicros": { "type": "number" },
							"currencyCode": { "type": "string" }
						},
						"description": "Opportunity amount"
					},
					"pointOfContactId": { "type": "string", "format": "uuid" }
				},
				"example": {
					"stage": "NEW",
					"name": "Opportunity name",
					"amount": { "amountMicros": 410000000, "currencyCode": "EUR" }
				}
			},
			"OpportunityForResponse": {
				"type": "object",
				"description": "An opportunity",
				"properties": {
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							},
							"workspaceMemberId": { "type": "string", "format": "uuid" },
							"name": { "type": "string" }
						},
						"description": "The creator of the record"
					},
					"closeDate": {
						"type": "string",
						"format": "date-time",
						"description": "Opportunity close date"
					},
					"stage": {
						"type": "string",
						"enum": ["NEW", "SCREENING", "MEETING", "PROPOSAL", "CUSTOMER"],
						"description": "Opportunity stage"
					},
					"position": { "type": "number", "description": "Opportunity record position" },
					"name": { "type": "string", "description": "The opportunity name" },
					"companyId": { "type": "string", "format": "uuid" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"amount": {
						"type": "object",
						"properties": {
							"amountMicros": { "type": "number" },
							"currencyCode": { "type": "string" }
						},
						"description": "Opportunity amount"
					},
					"pointOfContactId": { "type": "string", "format": "uuid" },
					"favorites": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/FavoriteForResponse" },
						"description": "Favorites linked to the opportunity"
					},
					"taskTargets": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TaskTargetForResponse" },
						"description": "Tasks tied to the opportunity"
					},
					"noteTargets": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/NoteTargetForResponse" },
						"description": "Notes tied to the opportunity"
					},
					"attachments": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/AttachmentForResponse" },
						"description": "Attachments linked to the opportunity"
					},
					"timelineActivities": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TimelineActivityForResponse" },
						"description": "Timeline Activities linked to the opportunity."
					},
					"company": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/CompanyForResponse" }],
						"description": "Opportunity company"
					},
					"pointOfContact": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/PersonForResponse" }],
						"description": "Opportunity point of contact"
					}
				}
			},
			"Person": {
				"type": "object",
				"description": "A person",
				"properties": {
					"name": {
						"type": "object",
						"properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } },
						"description": "Contactâ€™s name"
					},
					"companyId": { "type": "string", "format": "uuid" },
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The creator of the record"
					},
					"position": { "type": "number", "description": "Person record Position" },
					"avatarUrl": { "type": "string", "description": "Contactâ€™s avatar" },
					"city": { "type": "string", "description": "Contactâ€™s city" },
					"phones": {
						"properties": {
							"additionalPhones": { "type": "array", "items": { "type": "string" } },
							"primaryPhoneCountryCode": { "type": "string" },
							"primaryPhoneCallingCode": { "type": "string" },
							"primaryPhoneNumber": { "type": "string" }
						},
						"type": "object",
						"description": "Contactâ€™s phone numbers"
					},
					"jobTitle": { "type": "string", "description": "Contactâ€™s job title" },
					"xLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "Contactâ€™s X/Twitter account"
					},
					"linkedinLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "Contactâ€™s Linkedin account"
					},
					"emails": {
						"type": "object",
						"properties": {
							"primaryEmail": { "type": "string" },
							"additionalEmails": {
								"type": "array",
								"items": { "type": "string", "format": "email" }
							}
						},
						"description": "Contactâ€™s Emails"
					}
				},
				"example": {
					"name": { "firstName": "Ocie", "lastName": "Murphy" },
					"phones": {
						"primaryPhoneNumber": "06 10 20 30 40",
						"primaryPhoneCallingCode": "+33",
						"primaryPhoneCountryCode": "FR",
						"additionalPhones": []
					},
					"xLink": {
						"primaryLinkLabel": "",
						"primaryLinkUrl": "https://blank-bug.com",
						"additionalLinks": []
					},
					"linkedinLink": {
						"primaryLinkLabel": "",
						"primaryLinkUrl": "https://timely-pillbox.org",
						"additionalLinks": []
					},
					"emails": { "primaryEmail": "jayden.roberts@yahoo.com", "additionalEmails": null }
				}
			},
			"PersonForUpdate": {
				"type": "object",
				"description": "A person",
				"properties": {
					"name": {
						"type": "object",
						"properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } },
						"description": "Contactâ€™s name"
					},
					"companyId": { "type": "string", "format": "uuid" },
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The creator of the record"
					},
					"position": { "type": "number", "description": "Person record Position" },
					"avatarUrl": { "type": "string", "description": "Contactâ€™s avatar" },
					"city": { "type": "string", "description": "Contactâ€™s city" },
					"phones": {
						"properties": {
							"additionalPhones": { "type": "array", "items": { "type": "string" } },
							"primaryPhoneCountryCode": { "type": "string" },
							"primaryPhoneCallingCode": { "type": "string" },
							"primaryPhoneNumber": { "type": "string" }
						},
						"type": "object",
						"description": "Contactâ€™s phone numbers"
					},
					"jobTitle": { "type": "string", "description": "Contactâ€™s job title" },
					"xLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "Contactâ€™s X/Twitter account"
					},
					"linkedinLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "Contactâ€™s Linkedin account"
					},
					"emails": {
						"type": "object",
						"properties": {
							"primaryEmail": { "type": "string" },
							"additionalEmails": {
								"type": "array",
								"items": { "type": "string", "format": "email" }
							}
						},
						"description": "Contactâ€™s Emails"
					}
				},
				"example": {
					"name": { "firstName": "Jadyn", "lastName": "Ondricka" },
					"phones": {
						"primaryPhoneNumber": "06 10 20 30 40",
						"primaryPhoneCallingCode": "+33",
						"primaryPhoneCountryCode": "FR",
						"additionalPhones": []
					},
					"xLink": {
						"primaryLinkLabel": "",
						"primaryLinkUrl": "https://front-brook.name",
						"additionalLinks": []
					},
					"linkedinLink": {
						"primaryLinkLabel": "",
						"primaryLinkUrl": "https://ecstatic-vicinity.net/",
						"additionalLinks": []
					},
					"emails": { "primaryEmail": "daisy_harber@hotmail.com", "additionalEmails": null }
				}
			},
			"PersonForResponse": {
				"type": "object",
				"description": "A person",
				"properties": {
					"name": {
						"type": "object",
						"properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } },
						"description": "Contactâ€™s name"
					},
					"companyId": { "type": "string", "format": "uuid" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							},
							"workspaceMemberId": { "type": "string", "format": "uuid" },
							"name": { "type": "string" }
						},
						"description": "The creator of the record"
					},
					"position": { "type": "number", "description": "Person record Position" },
					"avatarUrl": { "type": "string", "description": "Contactâ€™s avatar" },
					"city": { "type": "string", "description": "Contactâ€™s city" },
					"phones": {
						"properties": {
							"additionalPhones": { "type": "array", "items": { "type": "string" } },
							"primaryPhoneCountryCode": { "type": "string" },
							"primaryPhoneCallingCode": { "type": "string" },
							"primaryPhoneNumber": { "type": "string" }
						},
						"type": "object",
						"description": "Contactâ€™s phone numbers"
					},
					"jobTitle": { "type": "string", "description": "Contactâ€™s job title" },
					"xLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "Contactâ€™s X/Twitter account"
					},
					"linkedinLink": {
						"type": "object",
						"properties": {
							"primaryLinkLabel": { "type": "string" },
							"primaryLinkUrl": { "type": "string" },
							"secondaryLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"description": "A secondary link",
									"properties": {
										"url": { "type": "string", "format": "uri" },
										"label": { "type": "string" }
									}
								}
							}
						},
						"description": "Contactâ€™s Linkedin account"
					},
					"emails": {
						"type": "object",
						"properties": {
							"primaryEmail": { "type": "string" },
							"additionalEmails": {
								"type": "array",
								"items": { "type": "string", "format": "email" }
							}
						},
						"description": "Contactâ€™s Emails"
					},
					"company": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/CompanyForResponse" }],
						"description": "Contactâ€™s company"
					},
					"pointOfContactForOpportunities": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/OpportunityForResponse" },
						"description": "List of opportunities for which that person is the point of contact"
					},
					"taskTargets": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TaskTargetForResponse" },
						"description": "Tasks tied to the contact"
					},
					"noteTargets": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/NoteTargetForResponse" },
						"description": "Notes tied to the contact"
					},
					"attachments": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/AttachmentForResponse" },
						"description": "Attachments linked to the contact."
					},
					"favorites": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/FavoriteForResponse" },
						"description": "Favorites linked to the contact"
					},
					"messageParticipants": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/MessageParticipantForResponse" },
						"description": "Message Participants"
					},
					"calendarEventParticipants": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/CalendarEventParticipantForResponse" },
						"description": "Calendar Event Participants"
					},
					"timelineActivities": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TimelineActivityForResponse" },
						"description": "Events linked to the person"
					}
				}
			},
			"Task": {
				"type": "object",
				"description": "A task",
				"properties": {
					"body": { "type": "string", "description": "Task body" },
					"title": { "type": "string", "description": "Task title" },
					"position": { "type": "number", "description": "Task record position" },
					"assigneeId": { "type": "string", "format": "uuid" },
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The creator of the record"
					},
					"status": {
						"type": "string",
						"enum": ["TODO", "IN_PROGRESS", "DONE"],
						"description": "Task status"
					},
					"dueAt": { "type": "string", "format": "date-time", "description": "Task due date" },
					"bodyV2": {
						"type": "object",
						"properties": { "blocknote": { "type": "string" }, "markdown": { "type": "string" } },
						"description": "Task body"
					}
				},
				"example": { "status": "TODO" }
			},
			"TaskForUpdate": {
				"type": "object",
				"description": "A task",
				"properties": {
					"body": { "type": "string", "description": "Task body" },
					"title": { "type": "string", "description": "Task title" },
					"position": { "type": "number", "description": "Task record position" },
					"assigneeId": { "type": "string", "format": "uuid" },
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The creator of the record"
					},
					"status": {
						"type": "string",
						"enum": ["TODO", "IN_PROGRESS", "DONE"],
						"description": "Task status"
					},
					"dueAt": { "type": "string", "format": "date-time", "description": "Task due date" },
					"bodyV2": {
						"type": "object",
						"properties": { "blocknote": { "type": "string" }, "markdown": { "type": "string" } },
						"description": "Task body"
					}
				},
				"example": { "status": "TODO" }
			},
			"TaskForResponse": {
				"type": "object",
				"description": "A task",
				"properties": {
					"body": { "type": "string", "description": "Task body" },
					"title": { "type": "string", "description": "Task title" },
					"position": { "type": "number", "description": "Task record position" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"assigneeId": { "type": "string", "format": "uuid" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							},
							"workspaceMemberId": { "type": "string", "format": "uuid" },
							"name": { "type": "string" }
						},
						"description": "The creator of the record"
					},
					"status": {
						"type": "string",
						"enum": ["TODO", "IN_PROGRESS", "DONE"],
						"description": "Task status"
					},
					"dueAt": { "type": "string", "format": "date-time", "description": "Task due date" },
					"bodyV2": {
						"type": "object",
						"properties": { "blocknote": { "type": "string" }, "markdown": { "type": "string" } },
						"description": "Task body"
					},
					"attachments": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/AttachmentForResponse" },
						"description": "Task attachments"
					},
					"timelineActivities": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TimelineActivityForResponse" },
						"description": "Timeline Activities linked to the task."
					},
					"favorites": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/FavoriteForResponse" },
						"description": "Favorites linked to the task"
					},
					"taskTargets": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TaskTargetForResponse" },
						"description": "Task targets"
					},
					"assignee": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkspaceMemberForResponse" }],
						"description": "Task assignee"
					}
				}
			},
			"TaskTarget": {
				"type": "object",
				"description": "A task target",
				"properties": {
					"opportunityId": { "type": "string", "format": "uuid" },
					"companyId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" },
					"taskId": { "type": "string", "format": "uuid" }
				},
				"example": {}
			},
			"TaskTargetForUpdate": {
				"type": "object",
				"description": "A task target",
				"properties": {
					"opportunityId": { "type": "string", "format": "uuid" },
					"companyId": { "type": "string", "format": "uuid" },
					"personId": { "type": "string", "format": "uuid" },
					"taskId": { "type": "string", "format": "uuid" }
				},
				"example": {}
			},
			"TaskTargetForResponse": {
				"type": "object",
				"description": "A task target",
				"properties": {
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"opportunityId": { "type": "string", "format": "uuid" },
					"companyId": { "type": "string", "format": "uuid" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"personId": { "type": "string", "format": "uuid" },
					"taskId": { "type": "string", "format": "uuid" },
					"opportunity": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/OpportunityForResponse" }],
						"description": "TaskTarget opportunity"
					},
					"company": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/CompanyForResponse" }],
						"description": "TaskTarget company"
					},
					"person": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/PersonForResponse" }],
						"description": "TaskTarget person"
					},
					"task": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/TaskForResponse" }],
						"description": "TaskTarget task"
					}
				}
			},
			"TimelineActivity": {
				"type": "object",
				"description": "Aggregated / filtered event to be displayed on the timeline",
				"properties": {
					"personId": { "type": "string", "format": "uuid" },
					"properties": { "type": "object", "description": "Json value for event details" },
					"name": { "type": "string", "description": "Event name" },
					"happensAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"workspaceMemberId": { "type": "string", "format": "uuid" },
					"linkedRecordCachedName": { "type": "string", "description": "Cached record name" },
					"companyId": { "type": "string", "format": "uuid" },
					"opportunityId": { "type": "string", "format": "uuid" },
					"noteId": { "type": "string", "format": "uuid" },
					"taskId": { "type": "string", "format": "uuid" },
					"workflowId": { "type": "string", "format": "uuid" },
					"workflowVersionId": { "type": "string", "format": "uuid" },
					"workflowRunId": { "type": "string", "format": "uuid" },
					"linkedObjectMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "Linked Object Metadata Id"
					},
					"linkedRecordId": {
						"type": "string",
						"format": "uuid",
						"description": "Linked Record id"
					}
				},
				"example": { "name": "Timeline Activity name" }
			},
			"TimelineActivityForUpdate": {
				"type": "object",
				"description": "Aggregated / filtered event to be displayed on the timeline",
				"properties": {
					"personId": { "type": "string", "format": "uuid" },
					"properties": { "type": "object", "description": "Json value for event details" },
					"name": { "type": "string", "description": "Event name" },
					"happensAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"workspaceMemberId": { "type": "string", "format": "uuid" },
					"linkedRecordCachedName": { "type": "string", "description": "Cached record name" },
					"companyId": { "type": "string", "format": "uuid" },
					"opportunityId": { "type": "string", "format": "uuid" },
					"noteId": { "type": "string", "format": "uuid" },
					"taskId": { "type": "string", "format": "uuid" },
					"workflowId": { "type": "string", "format": "uuid" },
					"workflowVersionId": { "type": "string", "format": "uuid" },
					"workflowRunId": { "type": "string", "format": "uuid" },
					"linkedObjectMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "Linked Object Metadata Id"
					},
					"linkedRecordId": {
						"type": "string",
						"format": "uuid",
						"description": "Linked Record id"
					}
				},
				"example": { "name": "Timeline Activity name" }
			},
			"TimelineActivityForResponse": {
				"type": "object",
				"description": "Aggregated / filtered event to be displayed on the timeline",
				"properties": {
					"personId": { "type": "string", "format": "uuid" },
					"properties": { "type": "object", "description": "Json value for event details" },
					"name": { "type": "string", "description": "Event name" },
					"happensAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"workspaceMemberId": { "type": "string", "format": "uuid" },
					"linkedRecordCachedName": { "type": "string", "description": "Cached record name" },
					"companyId": { "type": "string", "format": "uuid" },
					"opportunityId": { "type": "string", "format": "uuid" },
					"noteId": { "type": "string", "format": "uuid" },
					"taskId": { "type": "string", "format": "uuid" },
					"workflowId": { "type": "string", "format": "uuid" },
					"workflowVersionId": { "type": "string", "format": "uuid" },
					"workflowRunId": { "type": "string", "format": "uuid" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"linkedObjectMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "Linked Object Metadata Id"
					},
					"linkedRecordId": {
						"type": "string",
						"format": "uuid",
						"description": "Linked Record id"
					},
					"person": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/PersonForResponse" }],
						"description": "Event person"
					},
					"workspaceMember": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkspaceMemberForResponse" }],
						"description": "Event workspace member"
					},
					"company": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/CompanyForResponse" }],
						"description": "Event company"
					},
					"opportunity": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/OpportunityForResponse" }],
						"description": "Event opportunity"
					},
					"note": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/NoteForResponse" }],
						"description": "Event note"
					},
					"task": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/TaskForResponse" }],
						"description": "Event task"
					},
					"workflow": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkflowForResponse" }],
						"description": "Event workflow"
					},
					"workflowVersion": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkflowVersionForResponse" }],
						"description": "Event workflow version"
					},
					"workflowRun": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkflowRunForResponse" }],
						"description": "Event workflow run"
					}
				}
			},
			"ViewField": {
				"type": "object",
				"description": "(System) View Fields",
				"properties": {
					"isVisible": { "type": "boolean", "description": "View Field visibility" },
					"size": { "type": "integer", "description": "View Field size" },
					"fieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View Field target field"
					},
					"viewId": { "type": "string", "format": "uuid" },
					"position": { "type": "integer", "description": "View Field position" },
					"aggregateOperation": {
						"type": "string",
						"enum": [
							"AVG",
							"COUNT",
							"MAX",
							"MIN",
							"SUM",
							"COUNT_EMPTY",
							"COUNT_NOT_EMPTY",
							"COUNT_UNIQUE_VALUES",
							"PERCENTAGE_EMPTY",
							"PERCENTAGE_NOT_EMPTY",
							"COUNT_TRUE",
							"COUNT_FALSE"
						],
						"description": "Optional aggregate operation"
					}
				},
				"example": {
					"fieldMetadataId": "111707eb-3c25-4bd8-a59f-7725798ac929",
					"aggregateOperation": "AVG"
				},
				"required": ["fieldMetadataId"]
			},
			"ViewFieldForUpdate": {
				"type": "object",
				"description": "(System) View Fields",
				"properties": {
					"isVisible": { "type": "boolean", "description": "View Field visibility" },
					"size": { "type": "integer", "description": "View Field size" },
					"fieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View Field target field"
					},
					"viewId": { "type": "string", "format": "uuid" },
					"position": { "type": "integer", "description": "View Field position" },
					"aggregateOperation": {
						"type": "string",
						"enum": [
							"AVG",
							"COUNT",
							"MAX",
							"MIN",
							"SUM",
							"COUNT_EMPTY",
							"COUNT_NOT_EMPTY",
							"COUNT_UNIQUE_VALUES",
							"PERCENTAGE_EMPTY",
							"PERCENTAGE_NOT_EMPTY",
							"COUNT_TRUE",
							"COUNT_FALSE"
						],
						"description": "Optional aggregate operation"
					}
				},
				"example": {
					"fieldMetadataId": "5df46204-33a5-41d8-b0c5-5a6d6eb8ddcc",
					"aggregateOperation": "AVG"
				}
			},
			"ViewFieldForResponse": {
				"type": "object",
				"description": "(System) View Fields",
				"properties": {
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"isVisible": { "type": "boolean", "description": "View Field visibility" },
					"size": { "type": "integer", "description": "View Field size" },
					"fieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View Field target field"
					},
					"viewId": { "type": "string", "format": "uuid" },
					"position": { "type": "integer", "description": "View Field position" },
					"aggregateOperation": {
						"type": "string",
						"enum": [
							"AVG",
							"COUNT",
							"MAX",
							"MIN",
							"SUM",
							"COUNT_EMPTY",
							"COUNT_NOT_EMPTY",
							"COUNT_UNIQUE_VALUES",
							"PERCENTAGE_EMPTY",
							"PERCENTAGE_NOT_EMPTY",
							"COUNT_TRUE",
							"COUNT_FALSE"
						],
						"description": "Optional aggregate operation"
					},
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"view": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/ViewForResponse" }],
						"description": "View Field related view"
					}
				}
			},
			"ViewFilterGroup": {
				"type": "object",
				"description": "(System) View Filter Groups",
				"properties": {
					"viewId": { "type": "string", "format": "uuid" },
					"parentViewFilterGroupId": {
						"type": "string",
						"format": "uuid",
						"description": "Parent View Filter Group"
					},
					"logicalOperator": {
						"type": "string",
						"enum": ["AND", "OR", "NOT"],
						"description": "Logical operator for the filter group"
					},
					"positionInViewFilterGroup": {
						"type": "integer",
						"description": "Position in the parent view filter group"
					}
				},
				"example": { "logicalOperator": "AND" }
			},
			"ViewFilterGroupForUpdate": {
				"type": "object",
				"description": "(System) View Filter Groups",
				"properties": {
					"viewId": { "type": "string", "format": "uuid" },
					"parentViewFilterGroupId": {
						"type": "string",
						"format": "uuid",
						"description": "Parent View Filter Group"
					},
					"logicalOperator": {
						"type": "string",
						"enum": ["AND", "OR", "NOT"],
						"description": "Logical operator for the filter group"
					},
					"positionInViewFilterGroup": {
						"type": "integer",
						"description": "Position in the parent view filter group"
					}
				},
				"example": { "logicalOperator": "AND" }
			},
			"ViewFilterGroupForResponse": {
				"type": "object",
				"description": "(System) View Filter Groups",
				"properties": {
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"viewId": { "type": "string", "format": "uuid" },
					"parentViewFilterGroupId": {
						"type": "string",
						"format": "uuid",
						"description": "Parent View Filter Group"
					},
					"logicalOperator": {
						"type": "string",
						"enum": ["AND", "OR", "NOT"],
						"description": "Logical operator for the filter group"
					},
					"positionInViewFilterGroup": {
						"type": "integer",
						"description": "Position in the parent view filter group"
					},
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"view": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/ViewForResponse" }],
						"description": "View"
					}
				}
			},
			"ViewFilter": {
				"type": "object",
				"description": "(System) View Filters",
				"properties": {
					"viewFilterGroupId": {
						"type": "string",
						"format": "uuid",
						"description": "View Filter Group"
					},
					"viewId": { "type": "string", "format": "uuid" },
					"subFieldName": { "type": "string", "description": "Sub field name" },
					"positionInViewFilterGroup": {
						"type": "integer",
						"description": "Position in the view filter group"
					},
					"displayValue": { "type": "string", "description": "View Filter Display Value" },
					"value": { "type": "string", "description": "View Filter value" },
					"operand": { "type": "string", "description": "View Filter operand" },
					"fieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View Filter target field"
					}
				},
				"example": { "fieldMetadataId": "7e0bb440-e789-4c55-81bc-8706aec5945c" },
				"required": ["fieldMetadataId"]
			},
			"ViewFilterForUpdate": {
				"type": "object",
				"description": "(System) View Filters",
				"properties": {
					"viewFilterGroupId": {
						"type": "string",
						"format": "uuid",
						"description": "View Filter Group"
					},
					"viewId": { "type": "string", "format": "uuid" },
					"subFieldName": { "type": "string", "description": "Sub field name" },
					"positionInViewFilterGroup": {
						"type": "integer",
						"description": "Position in the view filter group"
					},
					"displayValue": { "type": "string", "description": "View Filter Display Value" },
					"value": { "type": "string", "description": "View Filter value" },
					"operand": { "type": "string", "description": "View Filter operand" },
					"fieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View Filter target field"
					}
				},
				"example": { "fieldMetadataId": "08867766-d3ea-4c30-83c2-a2d3331af2e2" }
			},
			"ViewFilterForResponse": {
				"type": "object",
				"description": "(System) View Filters",
				"properties": {
					"viewFilterGroupId": {
						"type": "string",
						"format": "uuid",
						"description": "View Filter Group"
					},
					"viewId": { "type": "string", "format": "uuid" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"subFieldName": { "type": "string", "description": "Sub field name" },
					"positionInViewFilterGroup": {
						"type": "integer",
						"description": "Position in the view filter group"
					},
					"displayValue": { "type": "string", "description": "View Filter Display Value" },
					"value": { "type": "string", "description": "View Filter value" },
					"operand": { "type": "string", "description": "View Filter operand" },
					"fieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View Filter target field"
					},
					"view": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/ViewForResponse" }],
						"description": "View Filter related view"
					}
				}
			},
			"ViewGroup": {
				"type": "object",
				"description": "(System) View Groups",
				"properties": {
					"fieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View Group target field"
					},
					"viewId": { "type": "string", "format": "uuid" },
					"position": { "type": "integer", "description": "View Field position" },
					"fieldValue": { "type": "string", "description": "Group by this field value" },
					"isVisible": { "type": "boolean", "description": "View Group visibility" }
				},
				"example": { "fieldMetadataId": "8364a3ed-db39-49d1-b594-af716be16678" },
				"required": ["fieldMetadataId"]
			},
			"ViewGroupForUpdate": {
				"type": "object",
				"description": "(System) View Groups",
				"properties": {
					"fieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View Group target field"
					},
					"viewId": { "type": "string", "format": "uuid" },
					"position": { "type": "integer", "description": "View Field position" },
					"fieldValue": { "type": "string", "description": "Group by this field value" },
					"isVisible": { "type": "boolean", "description": "View Group visibility" }
				},
				"example": { "fieldMetadataId": "e69ae6a8-3153-4ce8-8d1f-bb95fcd2874f" }
			},
			"ViewGroupForResponse": {
				"type": "object",
				"description": "(System) View Groups",
				"properties": {
					"fieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View Group target field"
					},
					"viewId": { "type": "string", "format": "uuid" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"position": { "type": "integer", "description": "View Field position" },
					"fieldValue": { "type": "string", "description": "Group by this field value" },
					"isVisible": { "type": "boolean", "description": "View Group visibility" },
					"view": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/ViewForResponse" }],
						"description": "View Group related view"
					}
				}
			},
			"View": {
				"type": "object",
				"description": "(System) Views",
				"properties": {
					"kanbanAggregateOperation": {
						"type": "string",
						"enum": [
							"AVG",
							"COUNT",
							"MAX",
							"MIN",
							"SUM",
							"COUNT_EMPTY",
							"COUNT_NOT_EMPTY",
							"COUNT_UNIQUE_VALUES",
							"PERCENTAGE_EMPTY",
							"PERCENTAGE_NOT_EMPTY",
							"COUNT_TRUE",
							"COUNT_FALSE"
						],
						"description": "Optional aggregate operation"
					},
					"key": { "type": "string", "enum": ["INDEX"], "description": "View key" },
					"kanbanFieldMetadataId": { "type": "string", "description": "View Kanban column field" },
					"position": { "type": "number", "description": "View position" },
					"isCompact": {
						"type": "boolean",
						"description": "Describes if the view is in compact mode"
					},
					"openRecordIn": {
						"type": "string",
						"enum": ["SIDE_PANEL", "RECORD_PAGE"],
						"description": "Display the records in a side panel or in a record page"
					},
					"kanbanAggregateOperationFieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "Field metadata used for aggregate operation"
					},
					"objectMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View target object"
					},
					"name": { "type": "string", "description": "View name" },
					"type": { "type": "string", "description": "View type" },
					"icon": { "type": "string", "description": "View icon" }
				},
				"example": {
					"kanbanAggregateOperation": "AVG",
					"key": "INDEX",
					"openRecordIn": "SIDE_PANEL",
					"objectMetadataId": "41700a80-0a5a-49bc-b1f9-ebbbfd98cfb8",
					"name": "View name"
				},
				"required": ["objectMetadataId"]
			},
			"ViewForUpdate": {
				"type": "object",
				"description": "(System) Views",
				"properties": {
					"kanbanAggregateOperation": {
						"type": "string",
						"enum": [
							"AVG",
							"COUNT",
							"MAX",
							"MIN",
							"SUM",
							"COUNT_EMPTY",
							"COUNT_NOT_EMPTY",
							"COUNT_UNIQUE_VALUES",
							"PERCENTAGE_EMPTY",
							"PERCENTAGE_NOT_EMPTY",
							"COUNT_TRUE",
							"COUNT_FALSE"
						],
						"description": "Optional aggregate operation"
					},
					"key": { "type": "string", "enum": ["INDEX"], "description": "View key" },
					"kanbanFieldMetadataId": { "type": "string", "description": "View Kanban column field" },
					"position": { "type": "number", "description": "View position" },
					"isCompact": {
						"type": "boolean",
						"description": "Describes if the view is in compact mode"
					},
					"openRecordIn": {
						"type": "string",
						"enum": ["SIDE_PANEL", "RECORD_PAGE"],
						"description": "Display the records in a side panel or in a record page"
					},
					"kanbanAggregateOperationFieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "Field metadata used for aggregate operation"
					},
					"objectMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View target object"
					},
					"name": { "type": "string", "description": "View name" },
					"type": { "type": "string", "description": "View type" },
					"icon": { "type": "string", "description": "View icon" }
				},
				"example": {
					"kanbanAggregateOperation": "AVG",
					"key": "INDEX",
					"openRecordIn": "SIDE_PANEL",
					"objectMetadataId": "fc425bd0-6453-4a60-b99a-bec377b00207",
					"name": "View name"
				}
			},
			"ViewForResponse": {
				"type": "object",
				"description": "(System) Views",
				"properties": {
					"kanbanAggregateOperation": {
						"type": "string",
						"enum": [
							"AVG",
							"COUNT",
							"MAX",
							"MIN",
							"SUM",
							"COUNT_EMPTY",
							"COUNT_NOT_EMPTY",
							"COUNT_UNIQUE_VALUES",
							"PERCENTAGE_EMPTY",
							"PERCENTAGE_NOT_EMPTY",
							"COUNT_TRUE",
							"COUNT_FALSE"
						],
						"description": "Optional aggregate operation"
					},
					"key": { "type": "string", "enum": ["INDEX"], "description": "View key" },
					"kanbanFieldMetadataId": { "type": "string", "description": "View Kanban column field" },
					"position": { "type": "number", "description": "View position" },
					"isCompact": {
						"type": "boolean",
						"description": "Describes if the view is in compact mode"
					},
					"openRecordIn": {
						"type": "string",
						"enum": ["SIDE_PANEL", "RECORD_PAGE"],
						"description": "Display the records in a side panel or in a record page"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"kanbanAggregateOperationFieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "Field metadata used for aggregate operation"
					},
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"objectMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View target object"
					},
					"name": { "type": "string", "description": "View name" },
					"type": { "type": "string", "description": "View type" },
					"icon": { "type": "string", "description": "View icon" },
					"viewFilterGroups": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/ViewFilterGroupForResponse" },
						"description": "View Filter Groups"
					},
					"viewFilters": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/ViewFilterForResponse" },
						"description": "View Filters"
					},
					"viewGroups": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/ViewGroupForResponse" },
						"description": "View Groups"
					},
					"viewFields": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/ViewFieldForResponse" },
						"description": "View Fields"
					},
					"favorites": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/FavoriteForResponse" },
						"description": "Favorites linked to the view"
					},
					"viewSorts": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/ViewSortForResponse" },
						"description": "View Sorts"
					}
				}
			},
			"ViewSort": {
				"type": "object",
				"description": "(System) View Sorts",
				"properties": {
					"viewId": { "type": "string", "format": "uuid" },
					"direction": { "type": "string", "description": "View Sort direction" },
					"fieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View Sort target field"
					}
				},
				"example": { "fieldMetadataId": "7d32b898-c6f8-4aef-b6a3-b1e6369b18ca" },
				"required": ["fieldMetadataId"]
			},
			"ViewSortForUpdate": {
				"type": "object",
				"description": "(System) View Sorts",
				"properties": {
					"viewId": { "type": "string", "format": "uuid" },
					"direction": { "type": "string", "description": "View Sort direction" },
					"fieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View Sort target field"
					}
				},
				"example": { "fieldMetadataId": "bf86b6a6-51e1-4263-9d4a-d0335ebe055d" }
			},
			"ViewSortForResponse": {
				"type": "object",
				"description": "(System) View Sorts",
				"properties": {
					"viewId": { "type": "string", "format": "uuid" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"direction": { "type": "string", "description": "View Sort direction" },
					"fieldMetadataId": {
						"type": "string",
						"format": "uuid",
						"description": "View Sort target field"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"view": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/ViewForResponse" }],
						"description": "View Sort related view"
					}
				}
			},
			"Webhook": {
				"type": "object",
				"description": "A webhook",
				"properties": {
					"targetUrl": { "type": "string", "description": "Webhook target url" },
					"description": { "type": "string" },
					"secret": {
						"type": "string",
						"description": "Optional secret used to compute the HMAC signature for webhook payloads. This secret is shared between Twenty and the webhook consumer to authenticate webhook requests."
					},
					"operations": {
						"type": "array",
						"items": { "type": "string" },
						"description": "Webhook operations"
					}
				},
				"example": {}
			},
			"WebhookForUpdate": {
				"type": "object",
				"description": "A webhook",
				"properties": {
					"targetUrl": { "type": "string", "description": "Webhook target url" },
					"description": { "type": "string" },
					"secret": {
						"type": "string",
						"description": "Optional secret used to compute the HMAC signature for webhook payloads. This secret is shared between Twenty and the webhook consumer to authenticate webhook requests."
					},
					"operations": {
						"type": "array",
						"items": { "type": "string" },
						"description": "Webhook operations"
					}
				},
				"example": {}
			},
			"WebhookForResponse": {
				"type": "object",
				"description": "A webhook",
				"properties": {
					"targetUrl": { "type": "string", "description": "Webhook target url" },
					"description": { "type": "string" },
					"secret": {
						"type": "string",
						"description": "Optional secret used to compute the HMAC signature for webhook payloads. This secret is shared between Twenty and the webhook consumer to authenticate webhook requests."
					},
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"operations": {
						"type": "array",
						"items": { "type": "string" },
						"description": "Webhook operations"
					}
				}
			},
			"WorkflowAutomatedTrigger": {
				"type": "object",
				"description": "A workflow automated trigger",
				"properties": {
					"type": {
						"type": "string",
						"enum": ["DATABASE_EVENT", "CRON"],
						"description": "The workflow automated trigger type"
					},
					"settings": {
						"type": "object",
						"description": "The workflow automated trigger settings"
					},
					"workflowId": { "type": "string", "format": "uuid" }
				},
				"example": { "type": "DATABASE_EVENT", "settings": {} },
				"required": ["type", "settings"]
			},
			"WorkflowAutomatedTriggerForUpdate": {
				"type": "object",
				"description": "A workflow automated trigger",
				"properties": {
					"type": {
						"type": "string",
						"enum": ["DATABASE_EVENT", "CRON"],
						"description": "The workflow automated trigger type"
					},
					"settings": {
						"type": "object",
						"description": "The workflow automated trigger settings"
					},
					"workflowId": { "type": "string", "format": "uuid" }
				},
				"example": { "type": "DATABASE_EVENT", "settings": {} }
			},
			"WorkflowAutomatedTriggerForResponse": {
				"type": "object",
				"description": "A workflow automated trigger",
				"properties": {
					"type": {
						"type": "string",
						"enum": ["DATABASE_EVENT", "CRON"],
						"description": "The workflow automated trigger type"
					},
					"settings": {
						"type": "object",
						"description": "The workflow automated trigger settings"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"workflowId": { "type": "string", "format": "uuid" },
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"workflow": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkflowForResponse" }],
						"description": "WorkflowAutomatedTrigger workflow"
					}
				}
			},
			"WorkflowRun": {
				"type": "object",
				"description": "A workflow run",
				"properties": {
					"workflowVersionId": { "type": "string", "format": "uuid" },
					"workflowId": { "type": "string", "format": "uuid" },
					"position": { "type": "number", "description": "Workflow run position" },
					"output": {
						"type": "object",
						"description": "Json object to provide output of the workflow run"
					},
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The executor of the workflow"
					},
					"status": {
						"type": "string",
						"enum": ["NOT_STARTED", "RUNNING", "COMPLETED", "FAILED"],
						"description": "Workflow run status"
					},
					"endedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Workflow run ended at"
					},
					"name": { "type": "string", "description": "Name of the workflow run" },
					"startedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Workflow run started at"
					},
					"context": { "type": "object", "description": "Context" }
				},
				"example": { "status": "NOT_STARTED", "name": "Workflow Run name" }
			},
			"WorkflowRunForUpdate": {
				"type": "object",
				"description": "A workflow run",
				"properties": {
					"workflowVersionId": { "type": "string", "format": "uuid" },
					"workflowId": { "type": "string", "format": "uuid" },
					"position": { "type": "number", "description": "Workflow run position" },
					"output": {
						"type": "object",
						"description": "Json object to provide output of the workflow run"
					},
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The executor of the workflow"
					},
					"status": {
						"type": "string",
						"enum": ["NOT_STARTED", "RUNNING", "COMPLETED", "FAILED"],
						"description": "Workflow run status"
					},
					"endedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Workflow run ended at"
					},
					"name": { "type": "string", "description": "Name of the workflow run" },
					"startedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Workflow run started at"
					},
					"context": { "type": "object", "description": "Context" }
				},
				"example": { "status": "NOT_STARTED", "name": "Workflow Run name" }
			},
			"WorkflowRunForResponse": {
				"type": "object",
				"description": "A workflow run",
				"properties": {
					"workflowVersionId": { "type": "string", "format": "uuid" },
					"workflowId": { "type": "string", "format": "uuid" },
					"position": { "type": "number", "description": "Workflow run position" },
					"output": {
						"type": "object",
						"description": "Json object to provide output of the workflow run"
					},
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							},
							"workspaceMemberId": { "type": "string", "format": "uuid" },
							"name": { "type": "string" }
						},
						"description": "The executor of the workflow"
					},
					"status": {
						"type": "string",
						"enum": ["NOT_STARTED", "RUNNING", "COMPLETED", "FAILED"],
						"description": "Workflow run status"
					},
					"endedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Workflow run ended at"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"name": { "type": "string", "description": "Name of the workflow run" },
					"startedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Workflow run started at"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"context": { "type": "object", "description": "Context" },
					"workflowVersion": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkflowVersionForResponse" }],
						"description": "Workflow version linked to the run."
					},
					"workflow": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkflowForResponse" }],
						"description": "Workflow linked to the run."
					},
					"favorites": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/FavoriteForResponse" },
						"description": "Favorites linked to the workflow run"
					},
					"timelineActivities": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TimelineActivityForResponse" },
						"description": "Timeline activities linked to the run"
					}
				}
			},
			"Workflow": {
				"type": "object",
				"description": "A workflow",
				"properties": {
					"lastPublishedVersionId": {
						"type": "string",
						"description": "The workflow last published version id"
					},
					"name": { "type": "string", "description": "The workflow name" },
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The creator of the record"
					},
					"position": { "type": "number", "description": "Workflow record position" },
					"statuses": {
						"type": "array",
						"items": { "type": "string", "enum": ["DRAFT", "ACTIVE", "DEACTIVATED"] },
						"description": "The current statuses of the workflow versions"
					}
				},
				"example": { "name": "Workflow name", "statuses": ["DRAFT"] }
			},
			"WorkflowForUpdate": {
				"type": "object",
				"description": "A workflow",
				"properties": {
					"lastPublishedVersionId": {
						"type": "string",
						"description": "The workflow last published version id"
					},
					"name": { "type": "string", "description": "The workflow name" },
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							}
						},
						"description": "The creator of the record"
					},
					"position": { "type": "number", "description": "Workflow record position" },
					"statuses": {
						"type": "array",
						"items": { "type": "string", "enum": ["DRAFT", "ACTIVE", "DEACTIVATED"] },
						"description": "The current statuses of the workflow versions"
					}
				},
				"example": { "name": "Workflow name", "statuses": ["DRAFT"] }
			},
			"WorkflowForResponse": {
				"type": "object",
				"description": "A workflow",
				"properties": {
					"lastPublishedVersionId": {
						"type": "string",
						"description": "The workflow last published version id"
					},
					"name": { "type": "string", "description": "The workflow name" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"createdBy": {
						"type": "object",
						"properties": {
							"source": {
								"type": "string",
								"enum": [
									"EMAIL",
									"CALENDAR",
									"WORKFLOW",
									"API",
									"IMPORT",
									"MANUAL",
									"SYSTEM",
									"WEBHOOK"
								]
							},
							"workspaceMemberId": { "type": "string", "format": "uuid" },
							"name": { "type": "string" }
						},
						"description": "The creator of the record"
					},
					"position": { "type": "number", "description": "Workflow record position" },
					"statuses": {
						"type": "array",
						"items": { "type": "string", "enum": ["DRAFT", "ACTIVE", "DEACTIVATED"] },
						"description": "The current statuses of the workflow versions"
					},
					"runs": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/WorkflowRunForResponse" },
						"description": "Workflow runs linked to the workflow."
					},
					"versions": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/WorkflowVersionForResponse" },
						"description": "Workflow versions linked to the workflow."
					},
					"timelineActivities": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TimelineActivityForResponse" },
						"description": "Timeline activities linked to the workflow"
					},
					"favorites": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/FavoriteForResponse" },
						"description": "Favorites linked to the workflow"
					},
					"automatedTriggers": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse" },
						"description": "Workflow automated triggers linked to the workflow."
					}
				}
			},
			"WorkflowVersion": {
				"type": "object",
				"description": "A workflow version",
				"properties": {
					"position": { "type": "number", "description": "Workflow version position" },
					"status": {
						"type": "string",
						"enum": ["DRAFT", "ACTIVE", "DEACTIVATED", "ARCHIVED"],
						"description": "The workflow version status"
					},
					"steps": { "type": "object", "description": "Json object to provide steps" },
					"trigger": { "type": "object", "description": "Json object to provide trigger" },
					"name": { "type": "string", "description": "The workflow version name" },
					"workflowId": { "type": "string", "format": "uuid" }
				},
				"example": { "status": "DRAFT", "name": "Workflow Version name" }
			},
			"WorkflowVersionForUpdate": {
				"type": "object",
				"description": "A workflow version",
				"properties": {
					"position": { "type": "number", "description": "Workflow version position" },
					"status": {
						"type": "string",
						"enum": ["DRAFT", "ACTIVE", "DEACTIVATED", "ARCHIVED"],
						"description": "The workflow version status"
					},
					"steps": { "type": "object", "description": "Json object to provide steps" },
					"trigger": { "type": "object", "description": "Json object to provide trigger" },
					"name": { "type": "string", "description": "The workflow version name" },
					"workflowId": { "type": "string", "format": "uuid" }
				},
				"example": { "status": "DRAFT", "name": "Workflow Version name" }
			},
			"WorkflowVersionForResponse": {
				"type": "object",
				"description": "A workflow version",
				"properties": {
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"position": { "type": "number", "description": "Workflow version position" },
					"status": {
						"type": "string",
						"enum": ["DRAFT", "ACTIVE", "DEACTIVATED", "ARCHIVED"],
						"description": "The workflow version status"
					},
					"steps": { "type": "object", "description": "Json object to provide steps" },
					"trigger": { "type": "object", "description": "Json object to provide trigger" },
					"name": { "type": "string", "description": "The workflow version name" },
					"workflowId": { "type": "string", "format": "uuid" },
					"timelineActivities": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TimelineActivityForResponse" },
						"description": "Timeline activities linked to the version"
					},
					"workflow": {
						"type": "object",
						"oneOf": [{ "$ref": "#/components/schemas/WorkflowForResponse" }],
						"description": "WorkflowVersion workflow"
					},
					"runs": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/WorkflowRunForResponse" },
						"description": "Workflow runs linked to the version."
					},
					"favorites": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/FavoriteForResponse" },
						"description": "Favorites linked to the workflow version"
					}
				}
			},
			"WorkspaceMember": {
				"type": "object",
				"description": "A workspace member",
				"properties": {
					"userEmail": { "type": "string", "description": "Related user email address" },
					"timeFormat": {
						"type": "string",
						"enum": ["SYSTEM", "HOUR_24", "HOUR_12"],
						"description": "User's preferred time format"
					},
					"dateFormat": {
						"type": "string",
						"enum": ["SYSTEM", "MONTH_FIRST", "DAY_FIRST", "YEAR_FIRST"],
						"description": "User's preferred date format"
					},
					"timeZone": { "type": "string", "description": "User time zone" },
					"userId": { "type": "string", "format": "uuid", "description": "Associated User Id" },
					"position": { "type": "number", "description": "Workspace member position" },
					"name": {
						"type": "object",
						"properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } },
						"description": "Workspace member name"
					},
					"colorScheme": { "type": "string", "description": "Preferred color scheme" },
					"locale": { "type": "string", "description": "Preferred language" },
					"avatarUrl": { "type": "string", "description": "Workspace member avatar" }
				},
				"example": {
					"timeFormat": "SYSTEM",
					"dateFormat": "SYSTEM",
					"userId": "fc6853f6-0d7b-4ab5-89ab-b85a2c7df2fd",
					"name": { "firstName": "Itzel", "lastName": "Kub" }
				},
				"required": ["userId"]
			},
			"WorkspaceMemberForUpdate": {
				"type": "object",
				"description": "A workspace member",
				"properties": {
					"userEmail": { "type": "string", "description": "Related user email address" },
					"timeFormat": {
						"type": "string",
						"enum": ["SYSTEM", "HOUR_24", "HOUR_12"],
						"description": "User's preferred time format"
					},
					"dateFormat": {
						"type": "string",
						"enum": ["SYSTEM", "MONTH_FIRST", "DAY_FIRST", "YEAR_FIRST"],
						"description": "User's preferred date format"
					},
					"timeZone": { "type": "string", "description": "User time zone" },
					"userId": { "type": "string", "format": "uuid", "description": "Associated User Id" },
					"position": { "type": "number", "description": "Workspace member position" },
					"name": {
						"type": "object",
						"properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } },
						"description": "Workspace member name"
					},
					"colorScheme": { "type": "string", "description": "Preferred color scheme" },
					"locale": { "type": "string", "description": "Preferred language" },
					"avatarUrl": { "type": "string", "description": "Workspace member avatar" }
				},
				"example": {
					"timeFormat": "SYSTEM",
					"dateFormat": "SYSTEM",
					"userId": "979f5b52-1a9c-408c-8584-78e6b47284dc",
					"name": { "firstName": "Donny", "lastName": "Sporer" }
				}
			},
			"WorkspaceMemberForResponse": {
				"type": "object",
				"description": "A workspace member",
				"properties": {
					"userEmail": { "type": "string", "description": "Related user email address" },
					"deletedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date when the record was deleted"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last time the record was changed"
					},
					"createdAt": { "type": "string", "format": "date-time", "description": "Creation date" },
					"id": { "type": "string", "format": "uuid", "description": "Id" },
					"timeFormat": {
						"type": "string",
						"enum": ["SYSTEM", "HOUR_24", "HOUR_12"],
						"description": "User's preferred time format"
					},
					"dateFormat": {
						"type": "string",
						"enum": ["SYSTEM", "MONTH_FIRST", "DAY_FIRST", "YEAR_FIRST"],
						"description": "User's preferred date format"
					},
					"timeZone": { "type": "string", "description": "User time zone" },
					"userId": { "type": "string", "format": "uuid", "description": "Associated User Id" },
					"position": { "type": "number", "description": "Workspace member position" },
					"name": {
						"type": "object",
						"properties": { "firstName": { "type": "string" }, "lastName": { "type": "string" } },
						"description": "Workspace member name"
					},
					"colorScheme": { "type": "string", "description": "Preferred color scheme" },
					"locale": { "type": "string", "description": "Preferred language" },
					"avatarUrl": { "type": "string", "description": "Workspace member avatar" },
					"timelineActivities": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TimelineActivityForResponse" },
						"description": "Events linked to the workspace member"
					},
					"calendarEventParticipants": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/CalendarEventParticipantForResponse" },
						"description": "Calendar Event Participants"
					},
					"blocklist": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/BlocklistForResponse" },
						"description": "Blocklisted handles"
					},
					"messageParticipants": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/MessageParticipantForResponse" },
						"description": "Message Participants"
					},
					"connectedAccounts": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/ConnectedAccountForResponse" },
						"description": "Connected accounts"
					},
					"authoredAttachments": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/AttachmentForResponse" },
						"description": "Attachments created by the workspace member"
					},
					"accountOwnerForCompanies": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/CompanyForResponse" },
						"description": "Account owner for companies"
					},
					"favorites": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/FavoriteForResponse" },
						"description": "Favorites linked to the workspace member"
					},
					"assignedTasks": {
						"type": "array",
						"items": { "$ref": "#/components/schemas/TaskForResponse" },
						"description": "Tasks assigned to the workspace member"
					}
				}
			}
		},
		"parameters": {
			"idPath": {
				"name": "id",
				"in": "path",
				"description": "Object id.",
				"required": true,
				"schema": { "type": "string", "format": "uuid" }
			},
			"depth": {
				"name": "depth",
				"in": "query",
				"description": "Determines the level of nested related objects to include in the response.  \n    - 0: Returns only the primary object's information.  \n    - 1: Returns the primary object along with its directly related objects (with no additional nesting for related objects).  \n    - 2: Returns the primary object, its directly related objects, and the related objects of those related objects.",
				"required": false,
				"schema": { "type": "integer", "enum": [0, 1, 2], "default": 1 }
			},
			"limit": {
				"name": "limit",
				"in": "query",
				"description": "Limits the number of objects returned.",
				"required": false,
				"schema": { "type": "integer", "minimum": 0, "maximum": 60, "default": 60 }
			}
		},
		"responses": {
			"400": {
				"description": "Bad Request",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"statusCode": { "type": "number" },
								"messages": { "type": "array", "items": { "type": "string" } },
								"error": { "type": "string" }
							},
							"example": { "statusCode": 400, "message": "error message", "error": "Bad Request" }
						}
					}
				}
			},
			"401": {
				"description": "Unauthorized",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"statusCode": { "type": "number" },
								"message": { "type": "string" },
								"error": { "type": "string" }
							},
							"example": { "statusCode": 401, "message": "Token invalid.", "error": "Unauthorized" }
						}
					}
				}
			}
		}
	},
	"security": [{ "bearerAuth": [] }],
	"externalDocs": { "description": "Find out more about **Twenty**", "url": "https://twenty.com" },
	"paths": {
		"/open-api/core": {
			"get": {
				"tags": ["General"],
				"summary": "Get Open Api Schema",
				"operationId": "GetOpenApiSchema",
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"openapi": { "type": "string" },
										"info": {
											"type": "object",
											"properties": {
												"title": { "type": "string" },
												"description": { "type": "string" },
												"termsOfService": { "type": "string" },
												"contact": {
													"type": "object",
													"properties": { "email": { "type": "string" } }
												},
												"license": {
													"type": "object",
													"properties": {
														"name": { "type": "string" },
														"url": { "type": "string" }
													}
												}
											}
										},
										"servers": {
											"type": "array",
											"items": { "url": { "type": "string" }, "description": { "type": "string" } }
										},
										"components": {
											"type": "object",
											"properties": {
												"schemas": { "type": "object" },
												"parameters": { "type": "object" },
												"responses": { "type": "object" }
											}
										},
										"paths": { "type": "object" },
										"tags": { "type": "object" }
									}
								}
							}
						}
					}
				}
			}
		},
		"/rest/apiKeys": {
			"get": {
				"tags": ["apiKeys"],
				"summary": "Find Many apiKeys",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **apiKeys**",
				"operationId": "findManyApiKeys",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"apiKeys": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ApiKeyForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["apiKeys"],
				"summary": "Create One apiKey",
				"operationId": "createOneApiKey",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApiKey" } } }
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createApiKey": { "$ref": "#/components/schemas/ApiKeyForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/apiKeys": {
			"post": {
				"tags": ["apiKeys"],
				"summary": "Create Many apiKeys",
				"operationId": "createManyApiKeys",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/ApiKey" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createApiKeys": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ApiKeyForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/apiKeys/{id}": {
			"get": {
				"tags": ["apiKeys"],
				"summary": "Find One apiKey",
				"description": "**depth** can be provided to request your **apiKey**",
				"operationId": "findOneApiKey",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"apiKey": { "$ref": "#/components/schemas/ApiKeyForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["apiKeys"],
				"summary": "Delete One apiKey",
				"operationId": "deleteOneApiKey",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteApiKey": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["apiKeys"],
				"summary": "Update One apiKey",
				"operationId": "UpdateOneApiKey",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ApiKeyForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateApiKey": { "$ref": "#/components/schemas/ApiKeyForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/apiKeys/duplicates": {
			"post": {
				"tags": ["apiKeys"],
				"summary": "Find apiKey Duplicates",
				"description": "**depth** can be provided to request your **apiKey**",
				"operationId": "findApiKeyDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": { "type": "array", "items": { "$ref": "#/components/schemas/ApiKey" } },
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["990011c3-5010-42fa-822f-f8d4b3fdbe39"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"apiKeyDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/ApiKeyForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/attachments": {
			"get": {
				"tags": ["attachments"],
				"summary": "Find Many attachments",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **attachments**",
				"operationId": "findManyAttachments",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"attachments": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/AttachmentForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["attachments"],
				"summary": "Create One attachment",
				"operationId": "createOneAttachment",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/Attachment" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createAttachment": { "$ref": "#/components/schemas/AttachmentForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/attachments": {
			"post": {
				"tags": ["attachments"],
				"summary": "Create Many attachments",
				"operationId": "createManyAttachments",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Attachment" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createAttachments": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/AttachmentForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/attachments/{id}": {
			"get": {
				"tags": ["attachments"],
				"summary": "Find One attachment",
				"description": "**depth** can be provided to request your **attachment**",
				"operationId": "findOneAttachment",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"attachment": { "$ref": "#/components/schemas/AttachmentForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["attachments"],
				"summary": "Delete One attachment",
				"operationId": "deleteOneAttachment",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteAttachment": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["attachments"],
				"summary": "Update One attachment",
				"operationId": "UpdateOneAttachment",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/AttachmentForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateAttachment": { "$ref": "#/components/schemas/AttachmentForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/attachments/duplicates": {
			"post": {
				"tags": ["attachments"],
				"summary": "Find attachment Duplicates",
				"description": "**depth** can be provided to request your **attachment**",
				"operationId": "findAttachmentDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/Attachment" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["d69dda46-a108-487a-9cea-25eafff970a5"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"attachmentDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/AttachmentForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/blocklists": {
			"get": {
				"tags": ["blocklists"],
				"summary": "Find Many blocklists",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **blocklists**",
				"operationId": "findManyBlocklists",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"blocklists": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/BlocklistForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["blocklists"],
				"summary": "Create One blocklist",
				"operationId": "createOneBlocklist",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/Blocklist" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createBlocklist": { "$ref": "#/components/schemas/BlocklistForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/blocklists": {
			"post": {
				"tags": ["blocklists"],
				"summary": "Create Many blocklists",
				"operationId": "createManyBlocklists",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Blocklist" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createBlocklists": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/BlocklistForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/blocklists/{id}": {
			"get": {
				"tags": ["blocklists"],
				"summary": "Find One blocklist",
				"description": "**depth** can be provided to request your **blocklist**",
				"operationId": "findOneBlocklist",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"blocklist": { "$ref": "#/components/schemas/BlocklistForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["blocklists"],
				"summary": "Delete One blocklist",
				"operationId": "deleteOneBlocklist",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteBlocklist": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["blocklists"],
				"summary": "Update One blocklist",
				"operationId": "UpdateOneBlocklist",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/BlocklistForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateBlocklist": { "$ref": "#/components/schemas/BlocklistForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/blocklists/duplicates": {
			"post": {
				"tags": ["blocklists"],
				"summary": "Find blocklist Duplicates",
				"description": "**depth** can be provided to request your **blocklist**",
				"operationId": "findBlocklistDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/Blocklist" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["c00b2efc-924f-4d51-a810-4b80251dfd9d"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"blocklistDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/BlocklistForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/calendarChannelEventAssociations": {
			"get": {
				"tags": ["calendarChannelEventAssociations"],
				"summary": "Find Many calendarChannelEventAssociations",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **calendarChannelEventAssociations**",
				"operationId": "findManyCalendarChannelEventAssociations",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"calendarChannelEventAssociations": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
													}
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["calendarChannelEventAssociations"],
				"summary": "Create One calendarChannelEventAssociation",
				"operationId": "createOneCalendarChannelEventAssociation",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/CalendarChannelEventAssociation" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createCalendarChannelEventAssociation": {
													"$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/calendarChannelEventAssociations": {
			"post": {
				"tags": ["calendarChannelEventAssociations"],
				"summary": "Create Many calendarChannelEventAssociations",
				"operationId": "createManyCalendarChannelEventAssociations",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/CalendarChannelEventAssociation" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createCalendarChannelEventAssociations": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/calendarChannelEventAssociations/{id}": {
			"get": {
				"tags": ["calendarChannelEventAssociations"],
				"summary": "Find One calendarChannelEventAssociation",
				"description": "**depth** can be provided to request your **calendarChannelEventAssociation**",
				"operationId": "findOneCalendarChannelEventAssociation",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"calendarChannelEventAssociation": {
													"$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["calendarChannelEventAssociations"],
				"summary": "Delete One calendarChannelEventAssociation",
				"operationId": "deleteOneCalendarChannelEventAssociation",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteCalendarChannelEventAssociation": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["calendarChannelEventAssociations"],
				"summary": "Update One calendarChannelEventAssociation",
				"operationId": "UpdateOneCalendarChannelEventAssociation",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/CalendarChannelEventAssociationForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateCalendarChannelEventAssociation": {
													"$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/calendarChannelEventAssociations/duplicates": {
			"post": {
				"tags": ["calendarChannelEventAssociations"],
				"summary": "Find calendarChannelEventAssociation Duplicates",
				"description": "**depth** can be provided to request your **calendarChannelEventAssociation**",
				"operationId": "findCalendarChannelEventAssociationDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/CalendarChannelEventAssociation" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["df2c3dfa-a5b5-48e1-8c25-252aee271268"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"calendarChannelEventAssociationDuplicates": {
														"type": "array",
														"items": {
															"$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/calendarChannels": {
			"get": {
				"tags": ["calendarChannels"],
				"summary": "Find Many calendarChannels",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **calendarChannels**",
				"operationId": "findManyCalendarChannels",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"calendarChannels": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/CalendarChannelForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["calendarChannels"],
				"summary": "Create One calendarChannel",
				"operationId": "createOneCalendarChannel",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CalendarChannel" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createCalendarChannel": {
													"$ref": "#/components/schemas/CalendarChannelForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/calendarChannels": {
			"post": {
				"tags": ["calendarChannels"],
				"summary": "Create Many calendarChannels",
				"operationId": "createManyCalendarChannels",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/CalendarChannel" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createCalendarChannels": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/CalendarChannelForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/calendarChannels/{id}": {
			"get": {
				"tags": ["calendarChannels"],
				"summary": "Find One calendarChannel",
				"description": "**depth** can be provided to request your **calendarChannel**",
				"operationId": "findOneCalendarChannel",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"calendarChannel": {
													"$ref": "#/components/schemas/CalendarChannelForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["calendarChannels"],
				"summary": "Delete One calendarChannel",
				"operationId": "deleteOneCalendarChannel",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteCalendarChannel": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["calendarChannels"],
				"summary": "Update One calendarChannel",
				"operationId": "UpdateOneCalendarChannel",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/CalendarChannelForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateCalendarChannel": {
													"$ref": "#/components/schemas/CalendarChannelForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/calendarChannels/duplicates": {
			"post": {
				"tags": ["calendarChannels"],
				"summary": "Find calendarChannel Duplicates",
				"description": "**depth** can be provided to request your **calendarChannel**",
				"operationId": "findCalendarChannelDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/CalendarChannel" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["0102f63b-14b0-480b-aef3-b55f007205d4"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"calendarChannelDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/CalendarChannelForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/calendarEventParticipants": {
			"get": {
				"tags": ["calendarEventParticipants"],
				"summary": "Find Many calendarEventParticipants",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **calendarEventParticipants**",
				"operationId": "findManyCalendarEventParticipants",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"calendarEventParticipants": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/CalendarEventParticipantForResponse"
													}
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["calendarEventParticipants"],
				"summary": "Create One calendarEventParticipant",
				"operationId": "createOneCalendarEventParticipant",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/CalendarEventParticipant" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createCalendarEventParticipant": {
													"$ref": "#/components/schemas/CalendarEventParticipantForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/calendarEventParticipants": {
			"post": {
				"tags": ["calendarEventParticipants"],
				"summary": "Create Many calendarEventParticipants",
				"operationId": "createManyCalendarEventParticipants",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/CalendarEventParticipant" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createCalendarEventParticipants": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/CalendarEventParticipantForResponse"
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/calendarEventParticipants/{id}": {
			"get": {
				"tags": ["calendarEventParticipants"],
				"summary": "Find One calendarEventParticipant",
				"description": "**depth** can be provided to request your **calendarEventParticipant**",
				"operationId": "findOneCalendarEventParticipant",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"calendarEventParticipant": {
													"$ref": "#/components/schemas/CalendarEventParticipantForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["calendarEventParticipants"],
				"summary": "Delete One calendarEventParticipant",
				"operationId": "deleteOneCalendarEventParticipant",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteCalendarEventParticipant": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["calendarEventParticipants"],
				"summary": "Update One calendarEventParticipant",
				"operationId": "UpdateOneCalendarEventParticipant",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/CalendarEventParticipantForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateCalendarEventParticipant": {
													"$ref": "#/components/schemas/CalendarEventParticipantForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/calendarEventParticipants/duplicates": {
			"post": {
				"tags": ["calendarEventParticipants"],
				"summary": "Find calendarEventParticipant Duplicates",
				"description": "**depth** can be provided to request your **calendarEventParticipant**",
				"operationId": "findCalendarEventParticipantDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/CalendarEventParticipant" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["42dbc16b-4b87-494a-9e4b-32d5a15aeb0b"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"calendarEventParticipantDuplicates": {
														"type": "array",
														"items": {
															"$ref": "#/components/schemas/CalendarEventParticipantForResponse"
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/calendarEvents": {
			"get": {
				"tags": ["calendarEvents"],
				"summary": "Find Many calendarEvents",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **calendarEvents**",
				"operationId": "findManyCalendarEvents",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"calendarEvents": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/CalendarEventForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["calendarEvents"],
				"summary": "Create One calendarEvent",
				"operationId": "createOneCalendarEvent",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CalendarEvent" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createCalendarEvent": {
													"$ref": "#/components/schemas/CalendarEventForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/calendarEvents": {
			"post": {
				"tags": ["calendarEvents"],
				"summary": "Create Many calendarEvents",
				"operationId": "createManyCalendarEvents",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/CalendarEvent" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createCalendarEvents": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/CalendarEventForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/calendarEvents/{id}": {
			"get": {
				"tags": ["calendarEvents"],
				"summary": "Find One calendarEvent",
				"description": "**depth** can be provided to request your **calendarEvent**",
				"operationId": "findOneCalendarEvent",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"calendarEvent": { "$ref": "#/components/schemas/CalendarEventForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["calendarEvents"],
				"summary": "Delete One calendarEvent",
				"operationId": "deleteOneCalendarEvent",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteCalendarEvent": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["calendarEvents"],
				"summary": "Update One calendarEvent",
				"operationId": "UpdateOneCalendarEvent",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/CalendarEventForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateCalendarEvent": {
													"$ref": "#/components/schemas/CalendarEventForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/calendarEvents/duplicates": {
			"post": {
				"tags": ["calendarEvents"],
				"summary": "Find calendarEvent Duplicates",
				"description": "**depth** can be provided to request your **calendarEvent**",
				"operationId": "findCalendarEventDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/CalendarEvent" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["25afd5b7-a481-4880-af43-e00d01616b9b"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"calendarEventDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/CalendarEventForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/companies": {
			"get": {
				"tags": ["companies"],
				"summary": "Find Many companies",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **companies**",
				"operationId": "findManyCompanies",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"companies": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/CompanyForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["companies"],
				"summary": "Create One company",
				"operationId": "createOneCompany",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/Company" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createCompany": { "$ref": "#/components/schemas/CompanyForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/companies": {
			"post": {
				"tags": ["companies"],
				"summary": "Create Many companies",
				"operationId": "createManyCompanies",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Company" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createCompanies": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/CompanyForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/companies/{id}": {
			"get": {
				"tags": ["companies"],
				"summary": "Find One company",
				"description": "**depth** can be provided to request your **company**",
				"operationId": "findOneCompany",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"company": { "$ref": "#/components/schemas/CompanyForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["companies"],
				"summary": "Delete One company",
				"operationId": "deleteOneCompany",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteCompany": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["companies"],
				"summary": "Update One company",
				"operationId": "UpdateOneCompany",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/CompanyForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateCompany": { "$ref": "#/components/schemas/CompanyForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/companies/duplicates": {
			"post": {
				"tags": ["companies"],
				"summary": "Find company Duplicates",
				"description": "**depth** can be provided to request your **company**",
				"operationId": "findCompanyDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": { "type": "array", "items": { "$ref": "#/components/schemas/Company" } },
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["e414bd76-7dd4-4acf-9f46-e8d1bbbe9b24"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"companyDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/CompanyForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/connectedAccounts": {
			"get": {
				"tags": ["connectedAccounts"],
				"summary": "Find Many connectedAccounts",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **connectedAccounts**",
				"operationId": "findManyConnectedAccounts",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"connectedAccounts": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ConnectedAccountForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["connectedAccounts"],
				"summary": "Create One connectedAccount",
				"operationId": "createOneConnectedAccount",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ConnectedAccount" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createConnectedAccount": {
													"$ref": "#/components/schemas/ConnectedAccountForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/connectedAccounts": {
			"post": {
				"tags": ["connectedAccounts"],
				"summary": "Create Many connectedAccounts",
				"operationId": "createManyConnectedAccounts",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/ConnectedAccount" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createConnectedAccounts": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ConnectedAccountForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/connectedAccounts/{id}": {
			"get": {
				"tags": ["connectedAccounts"],
				"summary": "Find One connectedAccount",
				"description": "**depth** can be provided to request your **connectedAccount**",
				"operationId": "findOneConnectedAccount",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"connectedAccount": {
													"$ref": "#/components/schemas/ConnectedAccountForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["connectedAccounts"],
				"summary": "Delete One connectedAccount",
				"operationId": "deleteOneConnectedAccount",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteConnectedAccount": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["connectedAccounts"],
				"summary": "Update One connectedAccount",
				"operationId": "UpdateOneConnectedAccount",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/ConnectedAccountForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateConnectedAccount": {
													"$ref": "#/components/schemas/ConnectedAccountForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/connectedAccounts/duplicates": {
			"post": {
				"tags": ["connectedAccounts"],
				"summary": "Find connectedAccount Duplicates",
				"description": "**depth** can be provided to request your **connectedAccount**",
				"operationId": "findConnectedAccountDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/ConnectedAccount" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["b77d883b-9f2f-47ce-808c-d458d5cccad1"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"connectedAccountDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/ConnectedAccountForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/favoriteFolders": {
			"get": {
				"tags": ["favoriteFolders"],
				"summary": "Find Many favoriteFolders",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **favoriteFolders**",
				"operationId": "findManyFavoriteFolders",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"favoriteFolders": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/FavoriteFolderForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["favoriteFolders"],
				"summary": "Create One favoriteFolder",
				"operationId": "createOneFavoriteFolder",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/FavoriteFolder" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createFavoriteFolder": {
													"$ref": "#/components/schemas/FavoriteFolderForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/favoriteFolders": {
			"post": {
				"tags": ["favoriteFolders"],
				"summary": "Create Many favoriteFolders",
				"operationId": "createManyFavoriteFolders",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/FavoriteFolder" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createFavoriteFolders": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/FavoriteFolderForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/favoriteFolders/{id}": {
			"get": {
				"tags": ["favoriteFolders"],
				"summary": "Find One favoriteFolder",
				"description": "**depth** can be provided to request your **favoriteFolder**",
				"operationId": "findOneFavoriteFolder",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"favoriteFolder": {
													"$ref": "#/components/schemas/FavoriteFolderForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["favoriteFolders"],
				"summary": "Delete One favoriteFolder",
				"operationId": "deleteOneFavoriteFolder",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteFavoriteFolder": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["favoriteFolders"],
				"summary": "Update One favoriteFolder",
				"operationId": "UpdateOneFavoriteFolder",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/FavoriteFolderForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateFavoriteFolder": {
													"$ref": "#/components/schemas/FavoriteFolderForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/favoriteFolders/duplicates": {
			"post": {
				"tags": ["favoriteFolders"],
				"summary": "Find favoriteFolder Duplicates",
				"description": "**depth** can be provided to request your **favoriteFolder**",
				"operationId": "findFavoriteFolderDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/FavoriteFolder" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["59a182d1-d91c-4be0-9e43-3df6dfa70223"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"favoriteFolderDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/FavoriteFolderForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/favorites": {
			"get": {
				"tags": ["favorites"],
				"summary": "Find Many favorites",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **favorites**",
				"operationId": "findManyFavorites",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"favorites": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/FavoriteForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["favorites"],
				"summary": "Create One favorite",
				"operationId": "createOneFavorite",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/Favorite" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createFavorite": { "$ref": "#/components/schemas/FavoriteForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/favorites": {
			"post": {
				"tags": ["favorites"],
				"summary": "Create Many favorites",
				"operationId": "createManyFavorites",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Favorite" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createFavorites": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/FavoriteForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/favorites/{id}": {
			"get": {
				"tags": ["favorites"],
				"summary": "Find One favorite",
				"description": "**depth** can be provided to request your **favorite**",
				"operationId": "findOneFavorite",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"favorite": { "$ref": "#/components/schemas/FavoriteForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["favorites"],
				"summary": "Delete One favorite",
				"operationId": "deleteOneFavorite",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteFavorite": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["favorites"],
				"summary": "Update One favorite",
				"operationId": "UpdateOneFavorite",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/FavoriteForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateFavorite": { "$ref": "#/components/schemas/FavoriteForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/favorites/duplicates": {
			"post": {
				"tags": ["favorites"],
				"summary": "Find favorite Duplicates",
				"description": "**depth** can be provided to request your **favorite**",
				"operationId": "findFavoriteDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": { "type": "array", "items": { "$ref": "#/components/schemas/Favorite" } },
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["404b087e-fe7d-44b3-bd5e-7491428672ad"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"favoriteDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/FavoriteForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageChannelMessageAssociations": {
			"get": {
				"tags": ["messageChannelMessageAssociations"],
				"summary": "Find Many messageChannelMessageAssociations",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageChannelMessageAssociations**",
				"operationId": "findManyMessageChannelMessageAssociations",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"messageChannelMessageAssociations": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
													}
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["messageChannelMessageAssociations"],
				"summary": "Create One messageChannelMessageAssociation",
				"operationId": "createOneMessageChannelMessageAssociation",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/MessageChannelMessageAssociation" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createMessageChannelMessageAssociation": {
													"$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/messageChannelMessageAssociations": {
			"post": {
				"tags": ["messageChannelMessageAssociations"],
				"summary": "Create Many messageChannelMessageAssociations",
				"operationId": "createManyMessageChannelMessageAssociations",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/MessageChannelMessageAssociation" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createMessageChannelMessageAssociations": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageChannelMessageAssociations/{id}": {
			"get": {
				"tags": ["messageChannelMessageAssociations"],
				"summary": "Find One messageChannelMessageAssociation",
				"description": "**depth** can be provided to request your **messageChannelMessageAssociation**",
				"operationId": "findOneMessageChannelMessageAssociation",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"messageChannelMessageAssociation": {
													"$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["messageChannelMessageAssociations"],
				"summary": "Delete One messageChannelMessageAssociation",
				"operationId": "deleteOneMessageChannelMessageAssociation",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteMessageChannelMessageAssociation": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["messageChannelMessageAssociations"],
				"summary": "Update One messageChannelMessageAssociation",
				"operationId": "UpdateOneMessageChannelMessageAssociation",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/MessageChannelMessageAssociationForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateMessageChannelMessageAssociation": {
													"$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageChannelMessageAssociations/duplicates": {
			"post": {
				"tags": ["messageChannelMessageAssociations"],
				"summary": "Find messageChannelMessageAssociation Duplicates",
				"description": "**depth** can be provided to request your **messageChannelMessageAssociation**",
				"operationId": "findMessageChannelMessageAssociationDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/MessageChannelMessageAssociation" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["82f49017-2e9f-4e92-8601-91cf52d59acf"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"messageChannelMessageAssociationDuplicates": {
														"type": "array",
														"items": {
															"$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageChannels": {
			"get": {
				"tags": ["messageChannels"],
				"summary": "Find Many messageChannels",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageChannels**",
				"operationId": "findManyMessageChannels",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"messageChannels": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/MessageChannelForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["messageChannels"],
				"summary": "Create One messageChannel",
				"operationId": "createOneMessageChannel",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/MessageChannel" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createMessageChannel": {
													"$ref": "#/components/schemas/MessageChannelForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/messageChannels": {
			"post": {
				"tags": ["messageChannels"],
				"summary": "Create Many messageChannels",
				"operationId": "createManyMessageChannels",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/MessageChannel" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createMessageChannels": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/MessageChannelForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageChannels/{id}": {
			"get": {
				"tags": ["messageChannels"],
				"summary": "Find One messageChannel",
				"description": "**depth** can be provided to request your **messageChannel**",
				"operationId": "findOneMessageChannel",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"messageChannel": {
													"$ref": "#/components/schemas/MessageChannelForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["messageChannels"],
				"summary": "Delete One messageChannel",
				"operationId": "deleteOneMessageChannel",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteMessageChannel": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["messageChannels"],
				"summary": "Update One messageChannel",
				"operationId": "UpdateOneMessageChannel",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/MessageChannelForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateMessageChannel": {
													"$ref": "#/components/schemas/MessageChannelForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageChannels/duplicates": {
			"post": {
				"tags": ["messageChannels"],
				"summary": "Find messageChannel Duplicates",
				"description": "**depth** can be provided to request your **messageChannel**",
				"operationId": "findMessageChannelDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/MessageChannel" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["f5353b7f-912f-454e-a11b-b1cdfffa120e"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"messageChannelDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/MessageChannelForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageFolders": {
			"get": {
				"tags": ["messageFolders"],
				"summary": "Find Many messageFolders",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageFolders**",
				"operationId": "findManyMessageFolders",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"messageFolders": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/MessageFolderForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["messageFolders"],
				"summary": "Create One messageFolder",
				"operationId": "createOneMessageFolder",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/MessageFolder" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createMessageFolder": {
													"$ref": "#/components/schemas/MessageFolderForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/messageFolders": {
			"post": {
				"tags": ["messageFolders"],
				"summary": "Create Many messageFolders",
				"operationId": "createManyMessageFolders",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/MessageFolder" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createMessageFolders": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/MessageFolderForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageFolders/{id}": {
			"get": {
				"tags": ["messageFolders"],
				"summary": "Find One messageFolder",
				"description": "**depth** can be provided to request your **messageFolder**",
				"operationId": "findOneMessageFolder",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"messageFolder": { "$ref": "#/components/schemas/MessageFolderForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["messageFolders"],
				"summary": "Delete One messageFolder",
				"operationId": "deleteOneMessageFolder",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteMessageFolder": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["messageFolders"],
				"summary": "Update One messageFolder",
				"operationId": "UpdateOneMessageFolder",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/MessageFolderForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateMessageFolder": {
													"$ref": "#/components/schemas/MessageFolderForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageFolders/duplicates": {
			"post": {
				"tags": ["messageFolders"],
				"summary": "Find messageFolder Duplicates",
				"description": "**depth** can be provided to request your **messageFolder**",
				"operationId": "findMessageFolderDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/MessageFolder" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["0bb435db-48df-4bb6-a6ad-127e927fee69"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"messageFolderDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/MessageFolderForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageParticipants": {
			"get": {
				"tags": ["messageParticipants"],
				"summary": "Find Many messageParticipants",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageParticipants**",
				"operationId": "findManyMessageParticipants",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"messageParticipants": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/MessageParticipantForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["messageParticipants"],
				"summary": "Create One messageParticipant",
				"operationId": "createOneMessageParticipant",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/MessageParticipant" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createMessageParticipant": {
													"$ref": "#/components/schemas/MessageParticipantForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/messageParticipants": {
			"post": {
				"tags": ["messageParticipants"],
				"summary": "Create Many messageParticipants",
				"operationId": "createManyMessageParticipants",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/MessageParticipant" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createMessageParticipants": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/MessageParticipantForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageParticipants/{id}": {
			"get": {
				"tags": ["messageParticipants"],
				"summary": "Find One messageParticipant",
				"description": "**depth** can be provided to request your **messageParticipant**",
				"operationId": "findOneMessageParticipant",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"messageParticipant": {
													"$ref": "#/components/schemas/MessageParticipantForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["messageParticipants"],
				"summary": "Delete One messageParticipant",
				"operationId": "deleteOneMessageParticipant",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteMessageParticipant": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["messageParticipants"],
				"summary": "Update One messageParticipant",
				"operationId": "UpdateOneMessageParticipant",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/MessageParticipantForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateMessageParticipant": {
													"$ref": "#/components/schemas/MessageParticipantForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageParticipants/duplicates": {
			"post": {
				"tags": ["messageParticipants"],
				"summary": "Find messageParticipant Duplicates",
				"description": "**depth** can be provided to request your **messageParticipant**",
				"operationId": "findMessageParticipantDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/MessageParticipant" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["2f3b0223-8b76-4a63-9d61-d03fbd507487"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"messageParticipantDuplicates": {
														"type": "array",
														"items": {
															"$ref": "#/components/schemas/MessageParticipantForResponse"
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messages": {
			"get": {
				"tags": ["messages"],
				"summary": "Find Many messages",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messages**",
				"operationId": "findManyMessages",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"messages": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/MessageForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["messages"],
				"summary": "Create One message",
				"operationId": "createOneMessage",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/Message" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createMessage": { "$ref": "#/components/schemas/MessageForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/messages": {
			"post": {
				"tags": ["messages"],
				"summary": "Create Many messages",
				"operationId": "createManyMessages",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Message" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createMessages": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/MessageForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messages/{id}": {
			"get": {
				"tags": ["messages"],
				"summary": "Find One message",
				"description": "**depth** can be provided to request your **message**",
				"operationId": "findOneMessage",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"message": { "$ref": "#/components/schemas/MessageForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["messages"],
				"summary": "Delete One message",
				"operationId": "deleteOneMessage",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteMessage": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["messages"],
				"summary": "Update One message",
				"operationId": "UpdateOneMessage",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/MessageForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateMessage": { "$ref": "#/components/schemas/MessageForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messages/duplicates": {
			"post": {
				"tags": ["messages"],
				"summary": "Find message Duplicates",
				"description": "**depth** can be provided to request your **message**",
				"operationId": "findMessageDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": { "type": "array", "items": { "$ref": "#/components/schemas/Message" } },
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["2f3941ae-10e9-4009-840b-deacf260ea0c"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"messageDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/MessageForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageThreads": {
			"get": {
				"tags": ["messageThreads"],
				"summary": "Find Many messageThreads",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **messageThreads**",
				"operationId": "findManyMessageThreads",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"messageThreads": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/MessageThreadForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["messageThreads"],
				"summary": "Create One messageThread",
				"operationId": "createOneMessageThread",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/MessageThread" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createMessageThread": {
													"$ref": "#/components/schemas/MessageThreadForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/messageThreads": {
			"post": {
				"tags": ["messageThreads"],
				"summary": "Create Many messageThreads",
				"operationId": "createManyMessageThreads",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/MessageThread" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createMessageThreads": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/MessageThreadForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageThreads/{id}": {
			"get": {
				"tags": ["messageThreads"],
				"summary": "Find One messageThread",
				"description": "**depth** can be provided to request your **messageThread**",
				"operationId": "findOneMessageThread",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"messageThread": { "$ref": "#/components/schemas/MessageThreadForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["messageThreads"],
				"summary": "Delete One messageThread",
				"operationId": "deleteOneMessageThread",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteMessageThread": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["messageThreads"],
				"summary": "Update One messageThread",
				"operationId": "UpdateOneMessageThread",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/MessageThreadForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateMessageThread": {
													"$ref": "#/components/schemas/MessageThreadForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/messageThreads/duplicates": {
			"post": {
				"tags": ["messageThreads"],
				"summary": "Find messageThread Duplicates",
				"description": "**depth** can be provided to request your **messageThread**",
				"operationId": "findMessageThreadDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/MessageThread" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["674b700b-4cbe-442e-b50e-4aa60baa368d"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"messageThreadDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/MessageThreadForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/notes": {
			"get": {
				"tags": ["notes"],
				"summary": "Find Many notes",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **notes**",
				"operationId": "findManyNotes",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"notes": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/NoteForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["notes"],
				"summary": "Create One note",
				"operationId": "createOneNote",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Note" } } }
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createNote": { "$ref": "#/components/schemas/NoteForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/notes": {
			"post": {
				"tags": ["notes"],
				"summary": "Create Many notes",
				"operationId": "createManyNotes",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Note" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createNotes": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/NoteForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/notes/{id}": {
			"get": {
				"tags": ["notes"],
				"summary": "Find One note",
				"description": "**depth** can be provided to request your **note**",
				"operationId": "findOneNote",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": { "note": { "$ref": "#/components/schemas/NoteForResponse" } }
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["notes"],
				"summary": "Delete One note",
				"operationId": "deleteOneNote",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteNote": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["notes"],
				"summary": "Update One note",
				"operationId": "UpdateOneNote",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/NoteForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateNote": { "$ref": "#/components/schemas/NoteForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/notes/duplicates": {
			"post": {
				"tags": ["notes"],
				"summary": "Find note Duplicates",
				"description": "**depth** can be provided to request your **note**",
				"operationId": "findNoteDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": { "type": "array", "items": { "$ref": "#/components/schemas/Note" } },
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["dfeb6b07-1fe0-4667-bb8b-f0527f6637d0"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"noteDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/NoteForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/noteTargets": {
			"get": {
				"tags": ["noteTargets"],
				"summary": "Find Many noteTargets",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **noteTargets**",
				"operationId": "findManyNoteTargets",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"noteTargets": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/NoteTargetForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["noteTargets"],
				"summary": "Create One noteTarget",
				"operationId": "createOneNoteTarget",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/NoteTarget" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createNoteTarget": { "$ref": "#/components/schemas/NoteTargetForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/noteTargets": {
			"post": {
				"tags": ["noteTargets"],
				"summary": "Create Many noteTargets",
				"operationId": "createManyNoteTargets",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/NoteTarget" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createNoteTargets": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/NoteTargetForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/noteTargets/{id}": {
			"get": {
				"tags": ["noteTargets"],
				"summary": "Find One noteTarget",
				"description": "**depth** can be provided to request your **noteTarget**",
				"operationId": "findOneNoteTarget",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"noteTarget": { "$ref": "#/components/schemas/NoteTargetForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["noteTargets"],
				"summary": "Delete One noteTarget",
				"operationId": "deleteOneNoteTarget",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteNoteTarget": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["noteTargets"],
				"summary": "Update One noteTarget",
				"operationId": "UpdateOneNoteTarget",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/NoteTargetForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateNoteTarget": { "$ref": "#/components/schemas/NoteTargetForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/noteTargets/duplicates": {
			"post": {
				"tags": ["noteTargets"],
				"summary": "Find noteTarget Duplicates",
				"description": "**depth** can be provided to request your **noteTarget**",
				"operationId": "findNoteTargetDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/NoteTarget" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["1e92a71f-df93-4d84-8f7f-895d3e2a494c"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"noteTargetDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/NoteTargetForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/opportunities": {
			"get": {
				"tags": ["opportunities"],
				"summary": "Find Many opportunities",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **opportunities**",
				"operationId": "findManyOpportunities",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"opportunities": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/OpportunityForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["opportunities"],
				"summary": "Create One opportunity",
				"operationId": "createOneOpportunity",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/Opportunity" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createOpportunity": {
													"$ref": "#/components/schemas/OpportunityForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/opportunities": {
			"post": {
				"tags": ["opportunities"],
				"summary": "Create Many opportunities",
				"operationId": "createManyOpportunities",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Opportunity" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createOpportunities": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/OpportunityForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/opportunities/{id}": {
			"get": {
				"tags": ["opportunities"],
				"summary": "Find One opportunity",
				"description": "**depth** can be provided to request your **opportunity**",
				"operationId": "findOneOpportunity",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"opportunity": { "$ref": "#/components/schemas/OpportunityForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["opportunities"],
				"summary": "Delete One opportunity",
				"operationId": "deleteOneOpportunity",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteOpportunity": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["opportunities"],
				"summary": "Update One opportunity",
				"operationId": "UpdateOneOpportunity",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/OpportunityForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateOpportunity": {
													"$ref": "#/components/schemas/OpportunityForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/opportunities/duplicates": {
			"post": {
				"tags": ["opportunities"],
				"summary": "Find opportunity Duplicates",
				"description": "**depth** can be provided to request your **opportunity**",
				"operationId": "findOpportunityDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/Opportunity" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["9431b563-f6c6-4596-9404-b206329301df"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"opportunityDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/OpportunityForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/people": {
			"get": {
				"tags": ["people"],
				"summary": "Find Many people",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **people**",
				"operationId": "findManyPeople",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"people": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/PersonForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["people"],
				"summary": "Create One person",
				"operationId": "createOnePerson",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Person" } } }
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createPerson": { "$ref": "#/components/schemas/PersonForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/people": {
			"post": {
				"tags": ["people"],
				"summary": "Create Many people",
				"operationId": "createManyPeople",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Person" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createPeople": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/PersonForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/people/{id}": {
			"get": {
				"tags": ["people"],
				"summary": "Find One person",
				"description": "**depth** can be provided to request your **person**",
				"operationId": "findOnePerson",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"person": { "$ref": "#/components/schemas/PersonForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["people"],
				"summary": "Delete One person",
				"operationId": "deleteOnePerson",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deletePerson": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["people"],
				"summary": "Update One person",
				"operationId": "UpdateOnePerson",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/PersonForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updatePerson": { "$ref": "#/components/schemas/PersonForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/people/duplicates": {
			"post": {
				"tags": ["people"],
				"summary": "Find person Duplicates",
				"description": "**depth** can be provided to request your **person**",
				"operationId": "findPersonDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": { "type": "array", "items": { "$ref": "#/components/schemas/Person" } },
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["d778a3b1-b049-469a-8d37-e9c537e35cd4"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"personDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/PersonForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/tasks": {
			"get": {
				"tags": ["tasks"],
				"summary": "Find Many tasks",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **tasks**",
				"operationId": "findManyTasks",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"tasks": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/TaskForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["tasks"],
				"summary": "Create One task",
				"operationId": "createOneTask",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/Task" } } }
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createTask": { "$ref": "#/components/schemas/TaskForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/tasks": {
			"post": {
				"tags": ["tasks"],
				"summary": "Create Many tasks",
				"operationId": "createManyTasks",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Task" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createTasks": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/TaskForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/tasks/{id}": {
			"get": {
				"tags": ["tasks"],
				"summary": "Find One task",
				"description": "**depth** can be provided to request your **task**",
				"operationId": "findOneTask",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": { "task": { "$ref": "#/components/schemas/TaskForResponse" } }
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["tasks"],
				"summary": "Delete One task",
				"operationId": "deleteOneTask",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteTask": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["tasks"],
				"summary": "Update One task",
				"operationId": "UpdateOneTask",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/TaskForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateTask": { "$ref": "#/components/schemas/TaskForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/tasks/duplicates": {
			"post": {
				"tags": ["tasks"],
				"summary": "Find task Duplicates",
				"description": "**depth** can be provided to request your **task**",
				"operationId": "findTaskDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": { "type": "array", "items": { "$ref": "#/components/schemas/Task" } },
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["5263a186-1ea0-41d0-a996-0dd28f62e39a"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"taskDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/TaskForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/taskTargets": {
			"get": {
				"tags": ["taskTargets"],
				"summary": "Find Many taskTargets",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **taskTargets**",
				"operationId": "findManyTaskTargets",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"taskTargets": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/TaskTargetForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["taskTargets"],
				"summary": "Create One taskTarget",
				"operationId": "createOneTaskTarget",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/TaskTarget" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createTaskTarget": { "$ref": "#/components/schemas/TaskTargetForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/taskTargets": {
			"post": {
				"tags": ["taskTargets"],
				"summary": "Create Many taskTargets",
				"operationId": "createManyTaskTargets",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/TaskTarget" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createTaskTargets": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/TaskTargetForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/taskTargets/{id}": {
			"get": {
				"tags": ["taskTargets"],
				"summary": "Find One taskTarget",
				"description": "**depth** can be provided to request your **taskTarget**",
				"operationId": "findOneTaskTarget",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"taskTarget": { "$ref": "#/components/schemas/TaskTargetForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["taskTargets"],
				"summary": "Delete One taskTarget",
				"operationId": "deleteOneTaskTarget",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteTaskTarget": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["taskTargets"],
				"summary": "Update One taskTarget",
				"operationId": "UpdateOneTaskTarget",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/TaskTargetForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateTaskTarget": { "$ref": "#/components/schemas/TaskTargetForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/taskTargets/duplicates": {
			"post": {
				"tags": ["taskTargets"],
				"summary": "Find taskTarget Duplicates",
				"description": "**depth** can be provided to request your **taskTarget**",
				"operationId": "findTaskTargetDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/TaskTarget" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["7c180833-82ea-430f-a2b9-a0faf34e25f3"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"taskTargetDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/TaskTargetForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/timelineActivities": {
			"get": {
				"tags": ["timelineActivities"],
				"summary": "Find Many timelineActivities",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **timelineActivities**",
				"operationId": "findManyTimelineActivities",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"timelineActivities": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/TimelineActivityForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["timelineActivities"],
				"summary": "Create One timelineActivity",
				"operationId": "createOneTimelineActivity",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/TimelineActivity" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createTimelineActivity": {
													"$ref": "#/components/schemas/TimelineActivityForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/timelineActivities": {
			"post": {
				"tags": ["timelineActivities"],
				"summary": "Create Many timelineActivities",
				"operationId": "createManyTimelineActivities",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/TimelineActivity" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createTimelineActivities": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/TimelineActivityForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/timelineActivities/{id}": {
			"get": {
				"tags": ["timelineActivities"],
				"summary": "Find One timelineActivity",
				"description": "**depth** can be provided to request your **timelineActivity**",
				"operationId": "findOneTimelineActivity",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"timelineActivity": {
													"$ref": "#/components/schemas/TimelineActivityForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["timelineActivities"],
				"summary": "Delete One timelineActivity",
				"operationId": "deleteOneTimelineActivity",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteTimelineActivity": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["timelineActivities"],
				"summary": "Update One timelineActivity",
				"operationId": "UpdateOneTimelineActivity",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/TimelineActivityForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateTimelineActivity": {
													"$ref": "#/components/schemas/TimelineActivityForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/timelineActivities/duplicates": {
			"post": {
				"tags": ["timelineActivities"],
				"summary": "Find timelineActivity Duplicates",
				"description": "**depth** can be provided to request your **timelineActivity**",
				"operationId": "findTimelineActivityDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/TimelineActivity" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["8f8f3733-554d-4b5f-8352-3efc6be2add8"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"timelineActivityDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/TimelineActivityForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewFields": {
			"get": {
				"tags": ["viewFields"],
				"summary": "Find Many viewFields",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewFields**",
				"operationId": "findManyViewFields",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"viewFields": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ViewFieldForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["viewFields"],
				"summary": "Create One viewField",
				"operationId": "createOneViewField",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ViewField" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createViewField": { "$ref": "#/components/schemas/ViewFieldForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/viewFields": {
			"post": {
				"tags": ["viewFields"],
				"summary": "Create Many viewFields",
				"operationId": "createManyViewFields",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/ViewField" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createViewFields": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ViewFieldForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewFields/{id}": {
			"get": {
				"tags": ["viewFields"],
				"summary": "Find One viewField",
				"description": "**depth** can be provided to request your **viewField**",
				"operationId": "findOneViewField",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"viewField": { "$ref": "#/components/schemas/ViewFieldForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["viewFields"],
				"summary": "Delete One viewField",
				"operationId": "deleteOneViewField",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteViewField": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["viewFields"],
				"summary": "Update One viewField",
				"operationId": "UpdateOneViewField",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ViewFieldForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateViewField": { "$ref": "#/components/schemas/ViewFieldForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewFields/duplicates": {
			"post": {
				"tags": ["viewFields"],
				"summary": "Find viewField Duplicates",
				"description": "**depth** can be provided to request your **viewField**",
				"operationId": "findViewFieldDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/ViewField" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["a670ac1d-b472-4481-86f8-6bd1fd5c9813"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"viewFieldDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/ViewFieldForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewFilterGroups": {
			"get": {
				"tags": ["viewFilterGroups"],
				"summary": "Find Many viewFilterGroups",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewFilterGroups**",
				"operationId": "findManyViewFilterGroups",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"viewFilterGroups": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ViewFilterGroupForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["viewFilterGroups"],
				"summary": "Create One viewFilterGroup",
				"operationId": "createOneViewFilterGroup",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ViewFilterGroup" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createViewFilterGroup": {
													"$ref": "#/components/schemas/ViewFilterGroupForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/viewFilterGroups": {
			"post": {
				"tags": ["viewFilterGroups"],
				"summary": "Create Many viewFilterGroups",
				"operationId": "createManyViewFilterGroups",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/ViewFilterGroup" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createViewFilterGroups": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ViewFilterGroupForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewFilterGroups/{id}": {
			"get": {
				"tags": ["viewFilterGroups"],
				"summary": "Find One viewFilterGroup",
				"description": "**depth** can be provided to request your **viewFilterGroup**",
				"operationId": "findOneViewFilterGroup",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"viewFilterGroup": {
													"$ref": "#/components/schemas/ViewFilterGroupForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["viewFilterGroups"],
				"summary": "Delete One viewFilterGroup",
				"operationId": "deleteOneViewFilterGroup",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteViewFilterGroup": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["viewFilterGroups"],
				"summary": "Update One viewFilterGroup",
				"operationId": "UpdateOneViewFilterGroup",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/ViewFilterGroupForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateViewFilterGroup": {
													"$ref": "#/components/schemas/ViewFilterGroupForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewFilterGroups/duplicates": {
			"post": {
				"tags": ["viewFilterGroups"],
				"summary": "Find viewFilterGroup Duplicates",
				"description": "**depth** can be provided to request your **viewFilterGroup**",
				"operationId": "findViewFilterGroupDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/ViewFilterGroup" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["a7960fe4-1a82-4edd-b9e7-39635c142e00"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"viewFilterGroupDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/ViewFilterGroupForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewFilters": {
			"get": {
				"tags": ["viewFilters"],
				"summary": "Find Many viewFilters",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewFilters**",
				"operationId": "findManyViewFilters",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"viewFilters": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ViewFilterForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["viewFilters"],
				"summary": "Create One viewFilter",
				"operationId": "createOneViewFilter",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ViewFilter" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createViewFilter": { "$ref": "#/components/schemas/ViewFilterForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/viewFilters": {
			"post": {
				"tags": ["viewFilters"],
				"summary": "Create Many viewFilters",
				"operationId": "createManyViewFilters",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/ViewFilter" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createViewFilters": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ViewFilterForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewFilters/{id}": {
			"get": {
				"tags": ["viewFilters"],
				"summary": "Find One viewFilter",
				"description": "**depth** can be provided to request your **viewFilter**",
				"operationId": "findOneViewFilter",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"viewFilter": { "$ref": "#/components/schemas/ViewFilterForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["viewFilters"],
				"summary": "Delete One viewFilter",
				"operationId": "deleteOneViewFilter",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteViewFilter": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["viewFilters"],
				"summary": "Update One viewFilter",
				"operationId": "UpdateOneViewFilter",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ViewFilterForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateViewFilter": { "$ref": "#/components/schemas/ViewFilterForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewFilters/duplicates": {
			"post": {
				"tags": ["viewFilters"],
				"summary": "Find viewFilter Duplicates",
				"description": "**depth** can be provided to request your **viewFilter**",
				"operationId": "findViewFilterDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/ViewFilter" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["48c10c27-bb1e-4ae3-8a28-2b8ac9f78a05"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"viewFilterDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/ViewFilterForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewGroups": {
			"get": {
				"tags": ["viewGroups"],
				"summary": "Find Many viewGroups",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewGroups**",
				"operationId": "findManyViewGroups",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"viewGroups": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ViewGroupForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["viewGroups"],
				"summary": "Create One viewGroup",
				"operationId": "createOneViewGroup",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ViewGroup" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createViewGroup": { "$ref": "#/components/schemas/ViewGroupForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/viewGroups": {
			"post": {
				"tags": ["viewGroups"],
				"summary": "Create Many viewGroups",
				"operationId": "createManyViewGroups",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/ViewGroup" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createViewGroups": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ViewGroupForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewGroups/{id}": {
			"get": {
				"tags": ["viewGroups"],
				"summary": "Find One viewGroup",
				"description": "**depth** can be provided to request your **viewGroup**",
				"operationId": "findOneViewGroup",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"viewGroup": { "$ref": "#/components/schemas/ViewGroupForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["viewGroups"],
				"summary": "Delete One viewGroup",
				"operationId": "deleteOneViewGroup",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteViewGroup": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["viewGroups"],
				"summary": "Update One viewGroup",
				"operationId": "UpdateOneViewGroup",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ViewGroupForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateViewGroup": { "$ref": "#/components/schemas/ViewGroupForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewGroups/duplicates": {
			"post": {
				"tags": ["viewGroups"],
				"summary": "Find viewGroup Duplicates",
				"description": "**depth** can be provided to request your **viewGroup**",
				"operationId": "findViewGroupDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/ViewGroup" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["f5a9f896-0dfe-4654-beaf-87c1b6c57c40"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"viewGroupDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/ViewGroupForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/views": {
			"get": {
				"tags": ["views"],
				"summary": "Find Many views",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **views**",
				"operationId": "findManyViews",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"views": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ViewForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["views"],
				"summary": "Create One view",
				"operationId": "createOneView",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": { "application/json": { "schema": { "$ref": "#/components/schemas/View" } } }
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createView": { "$ref": "#/components/schemas/ViewForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/views": {
			"post": {
				"tags": ["views"],
				"summary": "Create Many views",
				"operationId": "createManyViews",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/View" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createViews": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ViewForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/views/{id}": {
			"get": {
				"tags": ["views"],
				"summary": "Find One view",
				"description": "**depth** can be provided to request your **view**",
				"operationId": "findOneView",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": { "view": { "$ref": "#/components/schemas/ViewForResponse" } }
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["views"],
				"summary": "Delete One view",
				"operationId": "deleteOneView",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteView": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["views"],
				"summary": "Update One view",
				"operationId": "UpdateOneView",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ViewForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateView": { "$ref": "#/components/schemas/ViewForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/views/duplicates": {
			"post": {
				"tags": ["views"],
				"summary": "Find view Duplicates",
				"description": "**depth** can be provided to request your **view**",
				"operationId": "findViewDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": { "type": "array", "items": { "$ref": "#/components/schemas/View" } },
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["5b9ee2b2-629d-4246-b093-1589a85229e2"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"viewDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/ViewForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewSorts": {
			"get": {
				"tags": ["viewSorts"],
				"summary": "Find Many viewSorts",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **viewSorts**",
				"operationId": "findManyViewSorts",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"viewSorts": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ViewSortForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["viewSorts"],
				"summary": "Create One viewSort",
				"operationId": "createOneViewSort",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ViewSort" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createViewSort": { "$ref": "#/components/schemas/ViewSortForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/viewSorts": {
			"post": {
				"tags": ["viewSorts"],
				"summary": "Create Many viewSorts",
				"operationId": "createManyViewSorts",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/ViewSort" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createViewSorts": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/ViewSortForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewSorts/{id}": {
			"get": {
				"tags": ["viewSorts"],
				"summary": "Find One viewSort",
				"description": "**depth** can be provided to request your **viewSort**",
				"operationId": "findOneViewSort",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"viewSort": { "$ref": "#/components/schemas/ViewSortForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["viewSorts"],
				"summary": "Delete One viewSort",
				"operationId": "deleteOneViewSort",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteViewSort": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["viewSorts"],
				"summary": "Update One viewSort",
				"operationId": "UpdateOneViewSort",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/ViewSortForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateViewSort": { "$ref": "#/components/schemas/ViewSortForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/viewSorts/duplicates": {
			"post": {
				"tags": ["viewSorts"],
				"summary": "Find viewSort Duplicates",
				"description": "**depth** can be provided to request your **viewSort**",
				"operationId": "findViewSortDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": { "type": "array", "items": { "$ref": "#/components/schemas/ViewSort" } },
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["edf57010-9fa7-4cbe-8e59-63d47f821d3e"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"viewSortDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/ViewSortForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/webhooks": {
			"get": {
				"tags": ["webhooks"],
				"summary": "Find Many webhooks",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **webhooks**",
				"operationId": "findManyWebhooks",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"webhooks": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/WebhookForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["webhooks"],
				"summary": "Create One webhook",
				"operationId": "createOneWebhook",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/Webhook" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createWebhook": { "$ref": "#/components/schemas/WebhookForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/webhooks": {
			"post": {
				"tags": ["webhooks"],
				"summary": "Create Many webhooks",
				"operationId": "createManyWebhooks",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Webhook" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createWebhooks": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/WebhookForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/webhooks/{id}": {
			"get": {
				"tags": ["webhooks"],
				"summary": "Find One webhook",
				"description": "**depth** can be provided to request your **webhook**",
				"operationId": "findOneWebhook",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"webhook": { "$ref": "#/components/schemas/WebhookForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["webhooks"],
				"summary": "Delete One webhook",
				"operationId": "deleteOneWebhook",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteWebhook": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["webhooks"],
				"summary": "Update One webhook",
				"operationId": "UpdateOneWebhook",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/WebhookForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateWebhook": { "$ref": "#/components/schemas/WebhookForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/webhooks/duplicates": {
			"post": {
				"tags": ["webhooks"],
				"summary": "Find webhook Duplicates",
				"description": "**depth** can be provided to request your **webhook**",
				"operationId": "findWebhookDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": { "type": "array", "items": { "$ref": "#/components/schemas/Webhook" } },
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["8292cc49-d042-4d81-8c0f-46d48fe83829"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"webhookDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/WebhookForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workflowAutomatedTriggers": {
			"get": {
				"tags": ["workflowAutomatedTriggers"],
				"summary": "Find Many workflowAutomatedTriggers",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workflowAutomatedTriggers**",
				"operationId": "findManyWorkflowAutomatedTriggers",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"workflowAutomatedTriggers": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
													}
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["workflowAutomatedTriggers"],
				"summary": "Create One workflowAutomatedTrigger",
				"operationId": "createOneWorkflowAutomatedTrigger",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/WorkflowAutomatedTrigger" }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createWorkflowAutomatedTrigger": {
													"$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/workflowAutomatedTriggers": {
			"post": {
				"tags": ["workflowAutomatedTriggers"],
				"summary": "Create Many workflowAutomatedTriggers",
				"operationId": "createManyWorkflowAutomatedTriggers",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/WorkflowAutomatedTrigger" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createWorkflowAutomatedTriggers": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workflowAutomatedTriggers/{id}": {
			"get": {
				"tags": ["workflowAutomatedTriggers"],
				"summary": "Find One workflowAutomatedTrigger",
				"description": "**depth** can be provided to request your **workflowAutomatedTrigger**",
				"operationId": "findOneWorkflowAutomatedTrigger",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"workflowAutomatedTrigger": {
													"$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["workflowAutomatedTriggers"],
				"summary": "Delete One workflowAutomatedTrigger",
				"operationId": "deleteOneWorkflowAutomatedTrigger",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteWorkflowAutomatedTrigger": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["workflowAutomatedTriggers"],
				"summary": "Update One workflowAutomatedTrigger",
				"operationId": "UpdateOneWorkflowAutomatedTrigger",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/WorkflowAutomatedTriggerForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateWorkflowAutomatedTrigger": {
													"$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workflowAutomatedTriggers/duplicates": {
			"post": {
				"tags": ["workflowAutomatedTriggers"],
				"summary": "Find workflowAutomatedTrigger Duplicates",
				"description": "**depth** can be provided to request your **workflowAutomatedTrigger**",
				"operationId": "findWorkflowAutomatedTriggerDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/WorkflowAutomatedTrigger" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["adc4756a-1b67-4208-b921-d7c58179d099"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"workflowAutomatedTriggerDuplicates": {
														"type": "array",
														"items": {
															"$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse"
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workflowRuns": {
			"get": {
				"tags": ["workflowRuns"],
				"summary": "Find Many workflowRuns",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workflowRuns**",
				"operationId": "findManyWorkflowRuns",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"workflowRuns": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/WorkflowRunForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["workflowRuns"],
				"summary": "Create One workflowRun",
				"operationId": "createOneWorkflowRun",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/WorkflowRun" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createWorkflowRun": {
													"$ref": "#/components/schemas/WorkflowRunForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/workflowRuns": {
			"post": {
				"tags": ["workflowRuns"],
				"summary": "Create Many workflowRuns",
				"operationId": "createManyWorkflowRuns",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/WorkflowRun" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createWorkflowRuns": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/WorkflowRunForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workflowRuns/{id}": {
			"get": {
				"tags": ["workflowRuns"],
				"summary": "Find One workflowRun",
				"description": "**depth** can be provided to request your **workflowRun**",
				"operationId": "findOneWorkflowRun",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"workflowRun": { "$ref": "#/components/schemas/WorkflowRunForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["workflowRuns"],
				"summary": "Delete One workflowRun",
				"operationId": "deleteOneWorkflowRun",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteWorkflowRun": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["workflowRuns"],
				"summary": "Update One workflowRun",
				"operationId": "UpdateOneWorkflowRun",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/WorkflowRunForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateWorkflowRun": {
													"$ref": "#/components/schemas/WorkflowRunForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workflowRuns/duplicates": {
			"post": {
				"tags": ["workflowRuns"],
				"summary": "Find workflowRun Duplicates",
				"description": "**depth** can be provided to request your **workflowRun**",
				"operationId": "findWorkflowRunDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/WorkflowRun" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["3a02ff9d-c039-4810-87f7-c612c0c48652"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"workflowRunDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/WorkflowRunForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workflows": {
			"get": {
				"tags": ["workflows"],
				"summary": "Find Many workflows",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workflows**",
				"operationId": "findManyWorkflows",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"workflows": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/WorkflowForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["workflows"],
				"summary": "Create One workflow",
				"operationId": "createOneWorkflow",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/Workflow" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createWorkflow": { "$ref": "#/components/schemas/WorkflowForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/workflows": {
			"post": {
				"tags": ["workflows"],
				"summary": "Create Many workflows",
				"operationId": "createManyWorkflows",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": { "type": "array", "items": { "$ref": "#/components/schemas/Workflow" } }
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createWorkflows": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/WorkflowForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workflows/{id}": {
			"get": {
				"tags": ["workflows"],
				"summary": "Find One workflow",
				"description": "**depth** can be provided to request your **workflow**",
				"operationId": "findOneWorkflow",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"workflow": { "$ref": "#/components/schemas/WorkflowForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["workflows"],
				"summary": "Delete One workflow",
				"operationId": "deleteOneWorkflow",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteWorkflow": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["workflows"],
				"summary": "Update One workflow",
				"operationId": "UpdateOneWorkflow",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/WorkflowForUpdate" } }
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateWorkflow": { "$ref": "#/components/schemas/WorkflowForResponse" }
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workflows/duplicates": {
			"post": {
				"tags": ["workflows"],
				"summary": "Find workflow Duplicates",
				"description": "**depth** can be provided to request your **workflow**",
				"operationId": "findWorkflowDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": { "type": "array", "items": { "$ref": "#/components/schemas/Workflow" } },
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["bdeff676-8515-4d56-99ac-fe662543a267"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"workflowDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/WorkflowForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workflowVersions": {
			"get": {
				"tags": ["workflowVersions"],
				"summary": "Find Many workflowVersions",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workflowVersions**",
				"operationId": "findManyWorkflowVersions",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"workflowVersions": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/WorkflowVersionForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["workflowVersions"],
				"summary": "Create One workflowVersion",
				"operationId": "createOneWorkflowVersion",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/WorkflowVersion" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createWorkflowVersion": {
													"$ref": "#/components/schemas/WorkflowVersionForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/workflowVersions": {
			"post": {
				"tags": ["workflowVersions"],
				"summary": "Create Many workflowVersions",
				"operationId": "createManyWorkflowVersions",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/WorkflowVersion" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createWorkflowVersions": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/WorkflowVersionForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workflowVersions/{id}": {
			"get": {
				"tags": ["workflowVersions"],
				"summary": "Find One workflowVersion",
				"description": "**depth** can be provided to request your **workflowVersion**",
				"operationId": "findOneWorkflowVersion",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"workflowVersion": {
													"$ref": "#/components/schemas/WorkflowVersionForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["workflowVersions"],
				"summary": "Delete One workflowVersion",
				"operationId": "deleteOneWorkflowVersion",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteWorkflowVersion": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["workflowVersions"],
				"summary": "Update One workflowVersion",
				"operationId": "UpdateOneWorkflowVersion",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/WorkflowVersionForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateWorkflowVersion": {
													"$ref": "#/components/schemas/WorkflowVersionForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workflowVersions/duplicates": {
			"post": {
				"tags": ["workflowVersions"],
				"summary": "Find workflowVersion Duplicates",
				"description": "**depth** can be provided to request your **workflowVersion**",
				"operationId": "findWorkflowVersionDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/WorkflowVersion" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["6fb6ca8b-255d-4c07-b31d-164d1631bbab"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"workflowVersionDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/WorkflowVersionForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workspaceMembers": {
			"get": {
				"tags": ["workspaceMembers"],
				"summary": "Find Many workspaceMembers",
				"description": "**order_by**, **filter**, **limit**, **depth**, **starting_after** or **ending_before** can be provided to request your **workspaceMembers**",
				"operationId": "findManyWorkspaceMembers",
				"parameters": [


					{ "$ref": "#/components/parameters/limit" },
					{ "$ref": "#/components/parameters/depth" }


				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"workspaceMembers": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/WorkspaceMemberForResponse" }
												}
											}
										},
										"pageInfo": {
											"type": "object",
											"properties": {
												"hasNextPage": { "type": "boolean" },
												"startCursor": { "type": "string", "format": "uuid" },
												"endCursor": { "type": "string", "format": "uuid" }
											}
										},
										"totalCount": { "type": "integer" }
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"post": {
				"tags": ["workspaceMembers"],
				"summary": "Create One workspaceMember",
				"operationId": "createOneWorkspaceMember",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": { "schema": { "$ref": "#/components/schemas/WorkspaceMember" } }
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createWorkspaceMember": {
													"$ref": "#/components/schemas/WorkspaceMemberForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/batch/workspaceMembers": {
			"post": {
				"tags": ["workspaceMembers"],
				"summary": "Create Many workspaceMembers",
				"operationId": "createManyWorkspaceMembers",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": { "$ref": "#/components/schemas/WorkspaceMember" }
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"createWorkspaceMembers": {
													"type": "array",
													"items": { "$ref": "#/components/schemas/WorkspaceMemberForResponse" }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workspaceMembers/{id}": {
			"get": {
				"tags": ["workspaceMembers"],
				"summary": "Find One workspaceMember",
				"description": "**depth** can be provided to request your **workspaceMember**",
				"operationId": "findOneWorkspaceMember",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"workspaceMember": {
													"$ref": "#/components/schemas/WorkspaceMemberForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"delete": {
				"tags": ["workspaceMembers"],
				"summary": "Delete One workspaceMember",
				"operationId": "deleteOneWorkspaceMember",
				"parameters": [{ "$ref": "#/components/parameters/idPath" }],
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"deleteWorkspaceMember": {
													"type": "object",
													"properties": { "id": { "type": "string", "format": "uuid" } }
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			},
			"patch": {
				"tags": ["workspaceMembers"],
				"summary": "Update One workspaceMember",
				"operationId": "UpdateOneWorkspaceMember",
				"parameters": [
					{ "$ref": "#/components/parameters/idPath" },
					{ "$ref": "#/components/parameters/depth" }
				],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": { "$ref": "#/components/schemas/WorkspaceMemberForUpdate" }
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "object",
											"properties": {
												"updateWorkspaceMember": {
													"$ref": "#/components/schemas/WorkspaceMemberForResponse"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		},
		"/rest/workspaceMembers/duplicates": {
			"post": {
				"tags": ["workspaceMembers"],
				"summary": "Find workspaceMember Duplicates",
				"description": "**depth** can be provided to request your **workspaceMember**",
				"operationId": "findWorkspaceMemberDuplicates",
				"parameters": [{ "$ref": "#/components/parameters/depth" }],
				"requestBody": {
					"description": "body",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"data": {
										"type": "array",
										"items": { "$ref": "#/components/schemas/WorkspaceMember" }
									},
									"ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
								},
								"example": { "ids": ["a2e526ae-9575-4837-a72e-5de97a10976d"] }
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"data": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"totalCount": { "type": "number" },
													"pageInfo": {
														"type": "object",
														"properties": {
															"hasNextPage": { "type": "boolean" },
															"startCursor": { "type": "string", "format": "uuid" },
															"endCursor": { "type": "string", "format": "uuid" }
														}
													},
													"workspaceMemberDuplicates": {
														"type": "array",
														"items": { "$ref": "#/components/schemas/WorkspaceMemberForResponse" }
													}
												}
											}
										}
									}
								}
							}
						}
					},
					"400": { "$ref": "#/components/responses/400" },
					"401": { "$ref": "#/components/responses/401" }
				}
			}
		}
	},
	"webhooks": {
		"ApiKey Created": {
			"post": {
				"tags": ["apiKey"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "apiKey.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["apiKey"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ApiKeyForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ApiKey Updated": {
			"post": {
				"tags": ["apiKey"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "apiKey.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["apiKey"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ApiKeyForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ApiKey Deleted": {
			"post": {
				"tags": ["apiKey"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "apiKey.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["apiKey"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ApiKeyForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Attachment Created": {
			"post": {
				"tags": ["attachment"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "attachment.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["attachment"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/AttachmentForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Attachment Updated": {
			"post": {
				"tags": ["attachment"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "attachment.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["attachment"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/AttachmentForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Attachment Deleted": {
			"post": {
				"tags": ["attachment"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "attachment.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["attachment"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/AttachmentForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Blocklist Created": {
			"post": {
				"tags": ["blocklist"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "blocklist.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["blocklist"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/BlocklistForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Blocklist Updated": {
			"post": {
				"tags": ["blocklist"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "blocklist.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["blocklist"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/BlocklistForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Blocklist Deleted": {
			"post": {
				"tags": ["blocklist"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "blocklist.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["blocklist"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/BlocklistForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"CalendarChannelEventAssociation Created": {
			"post": {
				"tags": ["calendarChannelEventAssociation"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": {
										"type": "string",
										"example": "calendarChannelEventAssociation.created"
									},
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": {
												"type": "string",
												"enum": ["calendarChannelEventAssociation"]
											}
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": {
										"$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"CalendarChannelEventAssociation Updated": {
			"post": {
				"tags": ["calendarChannelEventAssociation"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": {
										"type": "string",
										"example": "calendarChannelEventAssociation.updated"
									},
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": {
												"type": "string",
												"enum": ["calendarChannelEventAssociation"]
											}
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": {
										"$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
									},
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"CalendarChannelEventAssociation Deleted": {
			"post": {
				"tags": ["calendarChannelEventAssociation"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": {
										"type": "string",
										"example": "calendarChannelEventAssociation.deleted"
									},
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": {
												"type": "string",
												"enum": ["calendarChannelEventAssociation"]
											}
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": {
										"$ref": "#/components/schemas/CalendarChannelEventAssociationForResponse"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"CalendarChannel Created": {
			"post": {
				"tags": ["calendarChannel"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "calendarChannel.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["calendarChannel"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/CalendarChannelForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"CalendarChannel Updated": {
			"post": {
				"tags": ["calendarChannel"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "calendarChannel.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["calendarChannel"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/CalendarChannelForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"CalendarChannel Deleted": {
			"post": {
				"tags": ["calendarChannel"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "calendarChannel.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["calendarChannel"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/CalendarChannelForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"CalendarEventParticipant Created": {
			"post": {
				"tags": ["calendarEventParticipant"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "calendarEventParticipant.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["calendarEventParticipant"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/CalendarEventParticipantForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"CalendarEventParticipant Updated": {
			"post": {
				"tags": ["calendarEventParticipant"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "calendarEventParticipant.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["calendarEventParticipant"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/CalendarEventParticipantForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"CalendarEventParticipant Deleted": {
			"post": {
				"tags": ["calendarEventParticipant"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "calendarEventParticipant.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["calendarEventParticipant"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/CalendarEventParticipantForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"CalendarEvent Created": {
			"post": {
				"tags": ["calendarEvent"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "calendarEvent.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["calendarEvent"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/CalendarEventForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"CalendarEvent Updated": {
			"post": {
				"tags": ["calendarEvent"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "calendarEvent.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["calendarEvent"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/CalendarEventForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"CalendarEvent Deleted": {
			"post": {
				"tags": ["calendarEvent"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "calendarEvent.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["calendarEvent"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/CalendarEventForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Company Created": {
			"post": {
				"tags": ["company"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "company.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["company"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/CompanyForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Company Updated": {
			"post": {
				"tags": ["company"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "company.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["company"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/CompanyForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Company Deleted": {
			"post": {
				"tags": ["company"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "company.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["company"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/CompanyForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ConnectedAccount Created": {
			"post": {
				"tags": ["connectedAccount"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "connectedAccount.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["connectedAccount"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ConnectedAccountForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ConnectedAccount Updated": {
			"post": {
				"tags": ["connectedAccount"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "connectedAccount.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["connectedAccount"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ConnectedAccountForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ConnectedAccount Deleted": {
			"post": {
				"tags": ["connectedAccount"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "connectedAccount.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["connectedAccount"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ConnectedAccountForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"FavoriteFolder Created": {
			"post": {
				"tags": ["favoriteFolder"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "favoriteFolder.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["favoriteFolder"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/FavoriteFolderForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"FavoriteFolder Updated": {
			"post": {
				"tags": ["favoriteFolder"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "favoriteFolder.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["favoriteFolder"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/FavoriteFolderForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"FavoriteFolder Deleted": {
			"post": {
				"tags": ["favoriteFolder"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "favoriteFolder.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["favoriteFolder"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/FavoriteFolderForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Favorite Created": {
			"post": {
				"tags": ["favorite"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "favorite.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["favorite"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/FavoriteForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Favorite Updated": {
			"post": {
				"tags": ["favorite"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "favorite.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["favorite"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/FavoriteForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Favorite Deleted": {
			"post": {
				"tags": ["favorite"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "favorite.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["favorite"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/FavoriteForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageChannelMessageAssociation Created": {
			"post": {
				"tags": ["messageChannelMessageAssociation"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": {
										"type": "string",
										"example": "messageChannelMessageAssociation.created"
									},
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": {
												"type": "string",
												"enum": ["messageChannelMessageAssociation"]
											}
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": {
										"$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageChannelMessageAssociation Updated": {
			"post": {
				"tags": ["messageChannelMessageAssociation"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": {
										"type": "string",
										"example": "messageChannelMessageAssociation.updated"
									},
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": {
												"type": "string",
												"enum": ["messageChannelMessageAssociation"]
											}
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": {
										"$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
									},
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageChannelMessageAssociation Deleted": {
			"post": {
				"tags": ["messageChannelMessageAssociation"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": {
										"type": "string",
										"example": "messageChannelMessageAssociation.deleted"
									},
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": {
												"type": "string",
												"enum": ["messageChannelMessageAssociation"]
											}
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": {
										"$ref": "#/components/schemas/MessageChannelMessageAssociationForResponse"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageChannel Created": {
			"post": {
				"tags": ["messageChannel"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "messageChannel.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["messageChannel"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageChannelForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageChannel Updated": {
			"post": {
				"tags": ["messageChannel"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "messageChannel.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["messageChannel"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageChannelForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageChannel Deleted": {
			"post": {
				"tags": ["messageChannel"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "messageChannel.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["messageChannel"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageChannelForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageFolder Created": {
			"post": {
				"tags": ["messageFolder"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "messageFolder.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["messageFolder"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageFolderForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageFolder Updated": {
			"post": {
				"tags": ["messageFolder"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "messageFolder.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["messageFolder"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageFolderForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageFolder Deleted": {
			"post": {
				"tags": ["messageFolder"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "messageFolder.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["messageFolder"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageFolderForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageParticipant Created": {
			"post": {
				"tags": ["messageParticipant"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "messageParticipant.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["messageParticipant"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageParticipantForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageParticipant Updated": {
			"post": {
				"tags": ["messageParticipant"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "messageParticipant.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["messageParticipant"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageParticipantForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageParticipant Deleted": {
			"post": {
				"tags": ["messageParticipant"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "messageParticipant.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["messageParticipant"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageParticipantForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Message Created": {
			"post": {
				"tags": ["message"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "message.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["message"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Message Updated": {
			"post": {
				"tags": ["message"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "message.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["message"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Message Deleted": {
			"post": {
				"tags": ["message"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "message.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["message"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageThread Created": {
			"post": {
				"tags": ["messageThread"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "messageThread.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["messageThread"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageThreadForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageThread Updated": {
			"post": {
				"tags": ["messageThread"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "messageThread.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["messageThread"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageThreadForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"MessageThread Deleted": {
			"post": {
				"tags": ["messageThread"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "messageThread.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["messageThread"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/MessageThreadForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Note Created": {
			"post": {
				"tags": ["note"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "note.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["note"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/NoteForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Note Updated": {
			"post": {
				"tags": ["note"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "note.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["note"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/NoteForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Note Deleted": {
			"post": {
				"tags": ["note"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "note.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["note"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/NoteForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"NoteTarget Created": {
			"post": {
				"tags": ["noteTarget"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "noteTarget.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["noteTarget"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/NoteTargetForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"NoteTarget Updated": {
			"post": {
				"tags": ["noteTarget"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "noteTarget.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["noteTarget"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/NoteTargetForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"NoteTarget Deleted": {
			"post": {
				"tags": ["noteTarget"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "noteTarget.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["noteTarget"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/NoteTargetForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Opportunity Created": {
			"post": {
				"tags": ["opportunity"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "opportunity.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["opportunity"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/OpportunityForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Opportunity Updated": {
			"post": {
				"tags": ["opportunity"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "opportunity.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["opportunity"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/OpportunityForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Opportunity Deleted": {
			"post": {
				"tags": ["opportunity"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "opportunity.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["opportunity"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/OpportunityForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Person Created": {
			"post": {
				"tags": ["person"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "person.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["person"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/PersonForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Person Updated": {
			"post": {
				"tags": ["person"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "person.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["person"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/PersonForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Person Deleted": {
			"post": {
				"tags": ["person"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "person.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["person"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/PersonForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Task Created": {
			"post": {
				"tags": ["task"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "task.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["task"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/TaskForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Task Updated": {
			"post": {
				"tags": ["task"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "task.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["task"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/TaskForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Task Deleted": {
			"post": {
				"tags": ["task"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "task.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["task"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/TaskForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"TaskTarget Created": {
			"post": {
				"tags": ["taskTarget"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "taskTarget.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["taskTarget"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/TaskTargetForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"TaskTarget Updated": {
			"post": {
				"tags": ["taskTarget"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "taskTarget.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["taskTarget"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/TaskTargetForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"TaskTarget Deleted": {
			"post": {
				"tags": ["taskTarget"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "taskTarget.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["taskTarget"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/TaskTargetForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"TimelineActivity Created": {
			"post": {
				"tags": ["timelineActivity"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "timelineActivity.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["timelineActivity"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/TimelineActivityForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"TimelineActivity Updated": {
			"post": {
				"tags": ["timelineActivity"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "timelineActivity.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["timelineActivity"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/TimelineActivityForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"TimelineActivity Deleted": {
			"post": {
				"tags": ["timelineActivity"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "timelineActivity.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["timelineActivity"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/TimelineActivityForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewField Created": {
			"post": {
				"tags": ["viewField"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewField.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewField"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewFieldForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewField Updated": {
			"post": {
				"tags": ["viewField"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewField.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewField"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewFieldForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewField Deleted": {
			"post": {
				"tags": ["viewField"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewField.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewField"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewFieldForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewFilterGroup Created": {
			"post": {
				"tags": ["viewFilterGroup"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewFilterGroup.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewFilterGroup"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewFilterGroupForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewFilterGroup Updated": {
			"post": {
				"tags": ["viewFilterGroup"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewFilterGroup.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewFilterGroup"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewFilterGroupForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewFilterGroup Deleted": {
			"post": {
				"tags": ["viewFilterGroup"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewFilterGroup.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewFilterGroup"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewFilterGroupForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewFilter Created": {
			"post": {
				"tags": ["viewFilter"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewFilter.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewFilter"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewFilterForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewFilter Updated": {
			"post": {
				"tags": ["viewFilter"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewFilter.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewFilter"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewFilterForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewFilter Deleted": {
			"post": {
				"tags": ["viewFilter"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewFilter.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewFilter"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewFilterForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewGroup Created": {
			"post": {
				"tags": ["viewGroup"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewGroup.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewGroup"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewGroupForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewGroup Updated": {
			"post": {
				"tags": ["viewGroup"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewGroup.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewGroup"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewGroupForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewGroup Deleted": {
			"post": {
				"tags": ["viewGroup"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewGroup.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewGroup"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewGroupForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"View Created": {
			"post": {
				"tags": ["view"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "view.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["view"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"View Updated": {
			"post": {
				"tags": ["view"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "view.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["view"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"View Deleted": {
			"post": {
				"tags": ["view"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "view.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["view"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewSort Created": {
			"post": {
				"tags": ["viewSort"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewSort.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewSort"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewSortForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewSort Updated": {
			"post": {
				"tags": ["viewSort"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewSort.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewSort"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewSortForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"ViewSort Deleted": {
			"post": {
				"tags": ["viewSort"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "viewSort.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["viewSort"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/ViewSortForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Webhook Created": {
			"post": {
				"tags": ["webhook"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "webhook.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["webhook"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WebhookForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Webhook Updated": {
			"post": {
				"tags": ["webhook"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "webhook.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["webhook"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WebhookForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Webhook Deleted": {
			"post": {
				"tags": ["webhook"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "webhook.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["webhook"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WebhookForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"WorkflowAutomatedTrigger Created": {
			"post": {
				"tags": ["workflowAutomatedTrigger"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workflowAutomatedTrigger.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workflowAutomatedTrigger"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"WorkflowAutomatedTrigger Updated": {
			"post": {
				"tags": ["workflowAutomatedTrigger"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workflowAutomatedTrigger.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workflowAutomatedTrigger"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"WorkflowAutomatedTrigger Deleted": {
			"post": {
				"tags": ["workflowAutomatedTrigger"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workflowAutomatedTrigger.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workflowAutomatedTrigger"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkflowAutomatedTriggerForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"WorkflowRun Created": {
			"post": {
				"tags": ["workflowRun"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workflowRun.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workflowRun"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkflowRunForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"WorkflowRun Updated": {
			"post": {
				"tags": ["workflowRun"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workflowRun.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workflowRun"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkflowRunForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"WorkflowRun Deleted": {
			"post": {
				"tags": ["workflowRun"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workflowRun.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workflowRun"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkflowRunForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Workflow Created": {
			"post": {
				"tags": ["workflow"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workflow.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workflow"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkflowForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Workflow Updated": {
			"post": {
				"tags": ["workflow"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workflow.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workflow"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkflowForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"Workflow Deleted": {
			"post": {
				"tags": ["workflow"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workflow.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workflow"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkflowForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"WorkflowVersion Created": {
			"post": {
				"tags": ["workflowVersion"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workflowVersion.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workflowVersion"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkflowVersionForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"WorkflowVersion Updated": {
			"post": {
				"tags": ["workflowVersion"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workflowVersion.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workflowVersion"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkflowVersionForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"WorkflowVersion Deleted": {
			"post": {
				"tags": ["workflowVersion"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workflowVersion.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workflowVersion"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkflowVersionForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"WorkspaceMember Created": {
			"post": {
				"tags": ["workspaceMember"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workspaceMember.created" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workspaceMember"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkspaceMemberForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"WorkspaceMember Updated": {
			"post": {
				"tags": ["workspaceMember"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workspaceMember.updated" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workspaceMember"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkspaceMemberForResponse" },
									"updatedFields": { "type": "array", "items": { "type": "string" } }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		},
		"WorkspaceMember Deleted": {
			"post": {
				"tags": ["workspaceMember"],
				"security": [],
				"parameters": [
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Signature",
						"schema": { "type": "string" },
						"description": "HMAC SHA256 signature of the request payload using the webhook secret. To compute the signature:\n1. Concatenate `X-Twenty-Webhook-Timestamp`, a colon (:), and the JSON string of the request payload.\n2. Compute the HMAC SHA256 hash using the shared secret as the key.\n3. Send the resulting hex digest as this header value.\nExample (Node.js):\n```javascript\nconst crypto = require(\"crypto\");\nconst timestamp = \"1735066639761\";\nconst payload = JSON.stringify({...});\nconst secret = \"your-secret\";\nconst stringToSign = `${timestamp}:${JSON.stringify(payload)}`;\nconst signature = crypto.createHmac(\"sha256\", secret)\n  .update(stringToSign)\n  .digest(\"hex\");\n```",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Timestamp",
						"schema": { "type": "string" },
						"description": "Unix timestamp of when the webhook was sent. This timestamp is included in the HMAC signature generation to prevent replay attacks.",
						"required": false
					},
					{
						"in": "header",
						"name": "X-Twenty-Webhook-Nonce",
						"schema": { "type": "string" },
						"description": "Unique identifier for this webhook request to prevent replay attacks. Consumers should ensure this nonce is not reused.",
						"required": false
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"targetUrl": {
										"type": "string",
										"example": "https://example.com/incomingWebhook"
									},
									"eventName": { "type": "string", "example": "workspaceMember.deleted" },
									"objectMetadata": {
										"type": "object",
										"properties": {
											"id": { "type": "string", "example": "370985db-22d8-4463-8e5f-2271d30913bd" },
											"nameSingular": { "type": "string", "enum": ["workspaceMember"] }
										}
									},
									"workspaceId": {
										"type": "string",
										"example": "872cfcf1-c79f-42bc-877d-5829f06eb3f9"
									},
									"webhookId": {
										"type": "string",
										"example": "90056586-1228-4e03-a507-70140aa85c05"
									},
									"eventDate": { "type": "string", "example": "2024-02-14T11:27:01.779Z" },
									"record": { "$ref": "#/components/schemas/WorkspaceMemberForResponse" }
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Return a 200 status to indicate that the data was received successfully"
					}
				}
			}
		}
	},
	"tags": [
		{ "name": "General", "description": "General requests" },
		{ "name": "apiKeys", "description": "Object `ApiKeys`" },
		{ "name": "attachments", "description": "Object `Attachments`" },
		{ "name": "blocklists", "description": "Object `Blocklists`" },
		{
			"name": "calendarChannelEventAssociations",
			"description": "Object `CalendarChannelEventAssociations`"
		},
		{ "name": "calendarChannels", "description": "Object `CalendarChannels`" },
		{ "name": "calendarEventParticipants", "description": "Object `CalendarEventParticipants`" },
		{ "name": "calendarEvents", "description": "Object `CalendarEvents`" },
		{ "name": "companies", "description": "Object `Companies`" },
		{ "name": "connectedAccounts", "description": "Object `ConnectedAccounts`" },
		{ "name": "favoriteFolders", "description": "Object `FavoriteFolders`" },
		{ "name": "favorites", "description": "Object `Favorites`" },
		{
			"name": "messageChannelMessageAssociations",
			"description": "Object `MessageChannelMessageAssociations`"
		},
		{ "name": "messageChannels", "description": "Object `MessageChannels`" },
		{ "name": "messageFolders", "description": "Object `MessageFolders`" },
		{ "name": "messageParticipants", "description": "Object `MessageParticipants`" },
		{ "name": "messages", "description": "Object `Messages`" },
		{ "name": "messageThreads", "description": "Object `MessageThreads`" },
		{ "name": "notes", "description": "Object `Notes`" },
		{ "name": "noteTargets", "description": "Object `NoteTargets`" },
		{ "name": "opportunities", "description": "Object `Opportunities`" },
		{ "name": "people", "description": "Object `People`" },
		{ "name": "tasks", "description": "Object `Tasks`" },
		{ "name": "taskTargets", "description": "Object `TaskTargets`" },
		{ "name": "timelineActivities", "description": "Object `TimelineActivities`" },
		{ "name": "viewFields", "description": "Object `ViewFields`" },
		{ "name": "viewFilterGroups", "description": "Object `ViewFilterGroups`" },
		{ "name": "viewFilters", "description": "Object `ViewFilters`" },
		{ "name": "viewGroups", "description": "Object `ViewGroups`" },
		{ "name": "views", "description": "Object `Views`" },
		{ "name": "viewSorts", "description": "Object `ViewSorts`" },
		{ "name": "webhooks", "description": "Object `Webhooks`" },
		{ "name": "workflowAutomatedTriggers", "description": "Object `WorkflowAutomatedTriggers`" },
		{ "name": "workflowRuns", "description": "Object `WorkflowRuns`" },
		{ "name": "workflows", "description": "Object `Workflows`" },
		{ "name": "workflowVersions", "description": "Object `WorkflowVersions`" },
		{ "name": "workspaceMembers", "description": "Object `WorkspaceMembers`" }
	]
}
